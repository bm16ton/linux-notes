ARM GAS  /tmp/ccBx6lvT.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MX_GPIO_Init:
  24              	.LFB73:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/main.c    ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/main.c    ****   * the License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                             www.st.com/SLA0044
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  21:Src/main.c    **** #include "main.h"
  22:Src/main.c    **** #include "usb_device.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include <stdint.h>
  27:Src/main.c    **** #include <stdbool.h>
  28:Src/main.c    **** #include "YAB_F103_config.h"
  29:Src/main.c    **** /* USER CODE END Includes */
  30:Src/main.c    **** 
  31:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  32:Src/main.c    **** /* USER CODE BEGIN PTD */
  33:Src/main.c    **** 
ARM GAS  /tmp/ccBx6lvT.s 			page 2


  34:Src/main.c    **** /* USER CODE END PTD */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  37:Src/main.c    **** /* USER CODE BEGIN PD */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* USER CODE END PD */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  42:Src/main.c    **** /* USER CODE BEGIN PM */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* USER CODE END PM */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE BEGIN PV */
  49:Src/main.c    **** volatile uint8_t LED_On_Time = LED_SLOW_BLINK;
  50:Src/main.c    **** 
  51:Src/main.c    **** /* USER CODE END PV */
  52:Src/main.c    **** 
  53:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  54:Src/main.c    **** void SystemClock_Config(void);
  55:Src/main.c    **** static void MX_GPIO_Init(void);
  56:Src/main.c    **** /* USER CODE BEGIN PFP */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* USER CODE END PFP */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  61:Src/main.c    **** /* USER CODE BEGIN 0 */
  62:Src/main.c    **** bool is_appcode_exist()
  63:Src/main.c    **** {
  64:Src/main.c    ****   uint32_t *mem = (uint32_t*)APP_ADDR;
  65:Src/main.c    **** 
  66:Src/main.c    ****   if ((mem[0] == 0x00000000 || mem[0] == 0xFFFFFFFF) && \
  67:Src/main.c    ****       (mem[1] == 0x00000000 || mem[1] == 0xFFFFFFFF) && \
  68:Src/main.c    ****       (mem[2] == 0x00000000 || mem[2] == 0xFFFFFFFF) && \
  69:Src/main.c    ****       (mem[3] == 0x00000000 || mem[3] == 0xFFFFFFFF))
  70:Src/main.c    ****   {
  71:Src/main.c    ****     return false;
  72:Src/main.c    ****   }
  73:Src/main.c    ****   else
  74:Src/main.c    ****   {
  75:Src/main.c    ****     return true;
  76:Src/main.c    ****   }
  77:Src/main.c    **** }
  78:Src/main.c    **** 
  79:Src/main.c    **** void jmp_to_appcode()
  80:Src/main.c    **** {
  81:Src/main.c    ****   /* Function pointer to the address of the user application. */
  82:Src/main.c    ****   uint32_t jump_addr = *((__IO uint32_t*)(APP_ADDR+4u));
  83:Src/main.c    ****   HAL_DeInit();
  84:Src/main.c    ****   /* Change the main stack pointer. */
  85:Src/main.c    ****   __set_MSP(*(__IO uint32_t*)APP_ADDR);
  86:Src/main.c    ****   SCB->VTOR = APP_ADDR;
  87:Src/main.c    **** 
  88:Src/main.c    ****   ((void (*) (void)) (jump_addr)) ();
  89:Src/main.c    **** }
  90:Src/main.c    **** 
ARM GAS  /tmp/ccBx6lvT.s 			page 3


  91:Src/main.c    **** bool is_button_down()
  92:Src/main.c    **** {
  93:Src/main.c    ****   if (HAL_GPIO_ReadPin(BTN_GPIO_PORT, BTN_GPIO_PIN) == GPIO_PIN_RESET)
  94:Src/main.c    ****   {
  95:Src/main.c    ****     HAL_Delay(200);
  96:Src/main.c    ****     return (HAL_GPIO_ReadPin(BTN_GPIO_PORT, BTN_GPIO_PIN) == GPIO_PIN_RESET);
  97:Src/main.c    ****   }
  98:Src/main.c    ****   return false;
  99:Src/main.c    **** }
 100:Src/main.c    **** 
 101:Src/main.c    **** /* USER CODE END 0 */
 102:Src/main.c    **** 
 103:Src/main.c    **** /**
 104:Src/main.c    ****   * @brief  The application entry point.
 105:Src/main.c    ****   * @retval int
 106:Src/main.c    ****   */
 107:Src/main.c    **** int main(void)
 108:Src/main.c    **** {
 109:Src/main.c    ****   /* USER CODE BEGIN 1 */
 110:Src/main.c    **** 
 111:Src/main.c    ****   /* USER CODE END 1 */
 112:Src/main.c    **** 
 113:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 114:Src/main.c    **** 
 115:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 116:Src/main.c    ****   HAL_Init();
 117:Src/main.c    **** 
 118:Src/main.c    ****   /* USER CODE BEGIN Init */
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* USER CODE END Init */
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* Configure the system clock */
 123:Src/main.c    ****   SystemClock_Config();
 124:Src/main.c    **** 
 125:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* USER CODE END SysInit */
 128:Src/main.c    **** 
 129:Src/main.c    ****   /* Initialize all configured peripherals */
 130:Src/main.c    ****   MX_GPIO_Init();
 131:Src/main.c    ****   MX_USB_DEVICE_Init();
 132:Src/main.c    ****   /* USER CODE BEGIN 2 */
 133:Src/main.c    **** 
 134:Src/main.c    ****   if(!is_appcode_exist() || is_button_down())
 135:Src/main.c    ****   {
 136:Src/main.c    ****     MX_USB_DEVICE_Init();
 137:Src/main.c    **** 
 138:Src/main.c    ****     while(1)
 139:Src/main.c    ****     {
 140:Src/main.c    **** #if LED_ENABLE
 141:Src/main.c    ****       switch(LED_On_Time) //LED handle
 142:Src/main.c    ****       {
 143:Src/main.c    ****         case LED_OFF_NOBLINK:
 144:Src/main.c    ****           LED_OFF;
 145:Src/main.c    ****           break;
 146:Src/main.c    **** 
 147:Src/main.c    ****         case LED_SLOW_BLINK:
ARM GAS  /tmp/ccBx6lvT.s 			page 4


 148:Src/main.c    ****           LED_ON;
 149:Src/main.c    ****           HAL_Delay(LED_On_Time);
 150:Src/main.c    ****           LED_OFF;
 151:Src/main.c    ****           HAL_Delay(LED_On_Time*3);
 152:Src/main.c    ****           break;
 153:Src/main.c    **** 
 154:Src/main.c    ****         case LED_ON_NOBLINK:
 155:Src/main.c    ****           LED_ON;
 156:Src/main.c    ****           break;
 157:Src/main.c    ****       }
 158:Src/main.c    **** #endif //#if LED_ENABLE
 159:Src/main.c    ****     }
 160:Src/main.c    ****   }
 161:Src/main.c    ****   else
 162:Src/main.c    ****   {
 163:Src/main.c    ****     jmp_to_appcode();
 164:Src/main.c    ****   }
 165:Src/main.c    **** 
 166:Src/main.c    ****   /* USER CODE END 2 */
 167:Src/main.c    **** 
 168:Src/main.c    ****   /* Infinite loop */
 169:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 170:Src/main.c    ****   while (1)
 171:Src/main.c    ****   {
 172:Src/main.c    ****     /* USER CODE END WHILE */
 173:Src/main.c    **** 
 174:Src/main.c    ****     /* USER CODE BEGIN 3 */
 175:Src/main.c    ****   }
 176:Src/main.c    ****   /* USER CODE END 3 */
 177:Src/main.c    **** }
 178:Src/main.c    **** 
 179:Src/main.c    **** /**
 180:Src/main.c    ****   * @brief System Clock Configuration
 181:Src/main.c    ****   * @retval None
 182:Src/main.c    ****   */
 183:Src/main.c    **** void SystemClock_Config(void)
 184:Src/main.c    **** {
 185:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 186:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 187:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 188:Src/main.c    **** 
 189:Src/main.c    ****   /** Initializes the RCC Oscillators according to the specified parameters
 190:Src/main.c    ****   * in the RCC_OscInitTypeDef structure.
 191:Src/main.c    ****   */
 192:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 193:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 194:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 195:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 196:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 197:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 198:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 199:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 200:Src/main.c    ****   {
 201:Src/main.c    ****     Error_Handler();
 202:Src/main.c    ****   }
 203:Src/main.c    ****   /** Initializes the CPU, AHB and APB buses clocks
 204:Src/main.c    ****   */
ARM GAS  /tmp/ccBx6lvT.s 			page 5


 205:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 206:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 207:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 208:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 209:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 210:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 211:Src/main.c    **** 
 212:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 213:Src/main.c    ****   {
 214:Src/main.c    ****     Error_Handler();
 215:Src/main.c    ****   }
 216:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 217:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 218:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 219:Src/main.c    ****   {
 220:Src/main.c    ****     Error_Handler();
 221:Src/main.c    ****   }
 222:Src/main.c    **** }
 223:Src/main.c    **** 
 224:Src/main.c    **** /**
 225:Src/main.c    ****   * @brief GPIO Initialization Function
 226:Src/main.c    ****   * @param None
 227:Src/main.c    ****   * @retval None
 228:Src/main.c    ****   */
 229:Src/main.c    **** static void MX_GPIO_Init(void)
 230:Src/main.c    **** {
  26              		.loc 1 230 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 70B5     		push	{r4, r5, r6, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 16
  33              		.cfi_offset 4, -16
  34              		.cfi_offset 5, -12
  35              		.cfi_offset 6, -8
  36              		.cfi_offset 14, -4
  37 0002 88B0     		sub	sp, sp, #32
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 48
 231:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  40              		.loc 1 231 3 view .LVU1
  41              		.loc 1 231 20 is_stmt 0 view .LVU2
  42 0004 0024     		movs	r4, #0
  43 0006 0494     		str	r4, [sp, #16]
  44 0008 0594     		str	r4, [sp, #20]
  45 000a 0694     		str	r4, [sp, #24]
  46 000c 0794     		str	r4, [sp, #28]
 232:Src/main.c    **** 
 233:Src/main.c    ****   /* GPIO Ports Clock Enable */
 234:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  47              		.loc 1 234 3 is_stmt 1 view .LVU3
  48              	.LBB4:
  49              		.loc 1 234 3 view .LVU4
  50              		.loc 1 234 3 view .LVU5
  51 000e 1A4B     		ldr	r3, .L3
  52 0010 9A69     		ldr	r2, [r3, #24]
ARM GAS  /tmp/ccBx6lvT.s 			page 6


  53 0012 42F01002 		orr	r2, r2, #16
  54 0016 9A61     		str	r2, [r3, #24]
  55              		.loc 1 234 3 view .LVU6
  56 0018 9A69     		ldr	r2, [r3, #24]
  57 001a 02F01002 		and	r2, r2, #16
  58 001e 0192     		str	r2, [sp, #4]
  59              		.loc 1 234 3 view .LVU7
  60 0020 019A     		ldr	r2, [sp, #4]
  61              	.LBE4:
  62              		.loc 1 234 3 view .LVU8
 235:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  63              		.loc 1 235 3 view .LVU9
  64              	.LBB5:
  65              		.loc 1 235 3 view .LVU10
  66              		.loc 1 235 3 view .LVU11
  67 0022 9A69     		ldr	r2, [r3, #24]
  68 0024 42F02002 		orr	r2, r2, #32
  69 0028 9A61     		str	r2, [r3, #24]
  70              		.loc 1 235 3 view .LVU12
  71 002a 9A69     		ldr	r2, [r3, #24]
  72 002c 02F02002 		and	r2, r2, #32
  73 0030 0292     		str	r2, [sp, #8]
  74              		.loc 1 235 3 view .LVU13
  75 0032 029A     		ldr	r2, [sp, #8]
  76              	.LBE5:
  77              		.loc 1 235 3 view .LVU14
 236:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  78              		.loc 1 236 3 view .LVU15
  79              	.LBB6:
  80              		.loc 1 236 3 view .LVU16
  81              		.loc 1 236 3 view .LVU17
  82 0034 9A69     		ldr	r2, [r3, #24]
  83 0036 42F00402 		orr	r2, r2, #4
  84 003a 9A61     		str	r2, [r3, #24]
  85              		.loc 1 236 3 view .LVU18
  86 003c 9B69     		ldr	r3, [r3, #24]
  87 003e 03F00403 		and	r3, r3, #4
  88 0042 0393     		str	r3, [sp, #12]
  89              		.loc 1 236 3 view .LVU19
  90 0044 039B     		ldr	r3, [sp, #12]
  91              	.LBE6:
  92              		.loc 1 236 3 view .LVU20
 237:Src/main.c    **** 
 238:Src/main.c    ****   /*Configure GPIO pin Output Level */
 239:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
  93              		.loc 1 239 3 view .LVU21
  94 0046 0D4E     		ldr	r6, .L3+4
  95 0048 2246     		mov	r2, r4
  96 004a 0221     		movs	r1, #2
  97 004c 3046     		mov	r0, r6
  98 004e FFF7FEFF 		bl	HAL_GPIO_WritePin
  99              	.LVL0:
 240:Src/main.c    **** 
 241:Src/main.c    ****   /*Configure GPIO pin : PC1 */
 242:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_1;
 100              		.loc 1 242 3 view .LVU22
 101              		.loc 1 242 23 is_stmt 0 view .LVU23
ARM GAS  /tmp/ccBx6lvT.s 			page 7


 102 0052 0223     		movs	r3, #2
 103 0054 0493     		str	r3, [sp, #16]
 243:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 104              		.loc 1 243 3 is_stmt 1 view .LVU24
 105              		.loc 1 243 24 is_stmt 0 view .LVU25
 106 0056 0125     		movs	r5, #1
 107 0058 0595     		str	r5, [sp, #20]
 244:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 108              		.loc 1 244 3 is_stmt 1 view .LVU26
 109              		.loc 1 244 24 is_stmt 0 view .LVU27
 110 005a 0695     		str	r5, [sp, #24]
 245:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 111              		.loc 1 245 3 is_stmt 1 view .LVU28
 112              		.loc 1 245 25 is_stmt 0 view .LVU29
 113 005c 0793     		str	r3, [sp, #28]
 246:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 114              		.loc 1 246 3 is_stmt 1 view .LVU30
 115 005e 04A9     		add	r1, sp, #16
 116 0060 3046     		mov	r0, r6
 117 0062 FFF7FEFF 		bl	HAL_GPIO_Init
 118              	.LVL1:
 247:Src/main.c    **** 
 248:Src/main.c    ****   /*Configure GPIO pin : PA0 */
 249:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_0;
 119              		.loc 1 249 3 view .LVU31
 120              		.loc 1 249 23 is_stmt 0 view .LVU32
 121 0066 0495     		str	r5, [sp, #16]
 250:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 122              		.loc 1 250 3 is_stmt 1 view .LVU33
 123              		.loc 1 250 24 is_stmt 0 view .LVU34
 124 0068 0594     		str	r4, [sp, #20]
 251:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 125              		.loc 1 251 3 is_stmt 1 view .LVU35
 126              		.loc 1 251 24 is_stmt 0 view .LVU36
 127 006a 0694     		str	r4, [sp, #24]
 252:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 128              		.loc 1 252 3 is_stmt 1 view .LVU37
 129 006c 04A9     		add	r1, sp, #16
 130 006e 0448     		ldr	r0, .L3+8
 131 0070 FFF7FEFF 		bl	HAL_GPIO_Init
 132              	.LVL2:
 253:Src/main.c    **** 
 254:Src/main.c    **** }
 133              		.loc 1 254 1 is_stmt 0 view .LVU38
 134 0074 08B0     		add	sp, sp, #32
 135              	.LCFI2:
 136              		.cfi_def_cfa_offset 16
 137              		@ sp needed
 138 0076 70BD     		pop	{r4, r5, r6, pc}
 139              	.L4:
 140              		.align	2
 141              	.L3:
 142 0078 00100240 		.word	1073876992
 143 007c 00100140 		.word	1073811456
 144 0080 00080140 		.word	1073809408
 145              		.cfi_endproc
 146              	.LFE73:
ARM GAS  /tmp/ccBx6lvT.s 			page 8


 148              		.section	.text.is_appcode_exist,"ax",%progbits
 149              		.align	1
 150              		.global	is_appcode_exist
 151              		.syntax unified
 152              		.thumb
 153              		.thumb_func
 154              		.fpu softvfp
 156              	is_appcode_exist:
 157              	.LFB68:
  63:Src/main.c    ****   uint32_t *mem = (uint32_t*)APP_ADDR;
 158              		.loc 1 63 1 is_stmt 1 view -0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              		@ link register save eliminated.
  64:Src/main.c    **** 
 163              		.loc 1 64 3 view .LVU40
 164              	.LVL3:
  66:Src/main.c    ****       (mem[1] == 0x00000000 || mem[1] == 0xFFFFFFFF) && \
 165              		.loc 1 66 3 view .LVU41
  66:Src/main.c    ****       (mem[1] == 0x00000000 || mem[1] == 0xFFFFFFFF) && \
 166              		.loc 1 66 11 is_stmt 0 view .LVU42
 167 0000 104B     		ldr	r3, .L11
 168 0002 1B68     		ldr	r3, [r3]
  66:Src/main.c    ****       (mem[1] == 0x00000000 || mem[1] == 0xFFFFFFFF) && \
 169              		.loc 1 66 29 view .LVU43
 170 0004 013B     		subs	r3, r3, #1
  66:Src/main.c    ****       (mem[1] == 0x00000000 || mem[1] == 0xFFFFFFFF) && \
 171              		.loc 1 66 6 view .LVU44
 172 0006 13F1030F 		cmn	r3, #3
 173 000a 13D9     		bls	.L7
  67:Src/main.c    ****       (mem[2] == 0x00000000 || mem[2] == 0xFFFFFFFF) && \
 174              		.loc 1 67 11 discriminator 1 view .LVU45
 175 000c 0E4B     		ldr	r3, .L11+4
 176 000e 1B68     		ldr	r3, [r3]
  67:Src/main.c    ****       (mem[2] == 0x00000000 || mem[2] == 0xFFFFFFFF) && \
 177              		.loc 1 67 29 discriminator 1 view .LVU46
 178 0010 013B     		subs	r3, r3, #1
  66:Src/main.c    ****       (mem[1] == 0x00000000 || mem[1] == 0xFFFFFFFF) && \
 179              		.loc 1 66 54 discriminator 1 view .LVU47
 180 0012 13F1030F 		cmn	r3, #3
 181 0016 0FD9     		bls	.L8
  68:Src/main.c    ****       (mem[3] == 0x00000000 || mem[3] == 0xFFFFFFFF))
 182              		.loc 1 68 11 view .LVU48
 183 0018 0C4B     		ldr	r3, .L11+8
 184 001a 1B68     		ldr	r3, [r3]
  68:Src/main.c    ****       (mem[3] == 0x00000000 || mem[3] == 0xFFFFFFFF))
 185              		.loc 1 68 29 view .LVU49
 186 001c 013B     		subs	r3, r3, #1
  67:Src/main.c    ****       (mem[2] == 0x00000000 || mem[2] == 0xFFFFFFFF) && \
 187              		.loc 1 67 54 view .LVU50
 188 001e 13F1030F 		cmn	r3, #3
 189 0022 0BD9     		bls	.L9
  69:Src/main.c    ****   {
 190              		.loc 1 69 11 view .LVU51
 191 0024 0A4B     		ldr	r3, .L11+12
 192 0026 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccBx6lvT.s 			page 9


  69:Src/main.c    ****   {
 193              		.loc 1 69 29 view .LVU52
 194 0028 013B     		subs	r3, r3, #1
  68:Src/main.c    ****       (mem[3] == 0x00000000 || mem[3] == 0xFFFFFFFF))
 195              		.loc 1 68 54 view .LVU53
 196 002a 13F1030F 		cmn	r3, #3
 197 002e 07D8     		bhi	.L10
  75:Src/main.c    ****   }
 198              		.loc 1 75 12 view .LVU54
 199 0030 0120     		movs	r0, #1
 200 0032 7047     		bx	lr
 201              	.L7:
 202 0034 0120     		movs	r0, #1
 203 0036 7047     		bx	lr
 204              	.L8:
 205 0038 0120     		movs	r0, #1
 206 003a 7047     		bx	lr
 207              	.L9:
 208 003c 0120     		movs	r0, #1
 209 003e 7047     		bx	lr
 210              	.L10:
  71:Src/main.c    ****   }
 211              		.loc 1 71 12 view .LVU55
 212 0040 0020     		movs	r0, #0
  77:Src/main.c    **** 
 213              		.loc 1 77 1 view .LVU56
 214 0042 7047     		bx	lr
 215              	.L12:
 216              		.align	2
 217              	.L11:
 218 0044 00400008 		.word	134234112
 219 0048 04400008 		.word	134234116
 220 004c 08400008 		.word	134234120
 221 0050 0C400008 		.word	134234124
 222              		.cfi_endproc
 223              	.LFE68:
 225              		.section	.text.jmp_to_appcode,"ax",%progbits
 226              		.align	1
 227              		.global	jmp_to_appcode
 228              		.syntax unified
 229              		.thumb
 230              		.thumb_func
 231              		.fpu softvfp
 233              	jmp_to_appcode:
 234              	.LFB69:
  80:Src/main.c    ****   /* Function pointer to the address of the user application. */
 235              		.loc 1 80 1 is_stmt 1 view -0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 0
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239 0000 10B5     		push	{r4, lr}
 240              	.LCFI3:
 241              		.cfi_def_cfa_offset 8
 242              		.cfi_offset 4, -8
 243              		.cfi_offset 14, -4
  82:Src/main.c    ****   HAL_DeInit();
 244              		.loc 1 82 3 view .LVU58
ARM GAS  /tmp/ccBx6lvT.s 			page 10


  82:Src/main.c    ****   HAL_DeInit();
 245              		.loc 1 82 12 is_stmt 0 view .LVU59
 246 0002 064B     		ldr	r3, .L15
 247 0004 1C68     		ldr	r4, [r3]
 248              	.LVL4:
  83:Src/main.c    ****   /* Change the main stack pointer. */
 249              		.loc 1 83 3 is_stmt 1 view .LVU60
 250 0006 FFF7FEFF 		bl	HAL_DeInit
 251              	.LVL5:
  85:Src/main.c    ****   SCB->VTOR = APP_ADDR;
 252              		.loc 1 85 3 view .LVU61
 253 000a 054B     		ldr	r3, .L15+4
 254 000c 1A68     		ldr	r2, [r3]
 255              	.LVL6:
 256              	.LBB7:
 257              	.LBI7:
 258              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
ARM GAS  /tmp/ccBx6lvT.s 			page 11


  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
ARM GAS  /tmp/ccBx6lvT.s 			page 12


  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccBx6lvT.s 			page 13


 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccBx6lvT.s 			page 14


 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccBx6lvT.s 			page 15


 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccBx6lvT.s 			page 16


 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 259              		.loc 2 331 27 view .LVU62
 260              	.LBB8:
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 261              		.loc 2 333 3 view .LVU63
 262              		.syntax unified
 263              	@ 333 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 264 000e 82F30888 		MSR msp, r2
 265              	@ 0 "" 2
 266              	.LVL7:
 267              		.loc 2 333 3 is_stmt 0 view .LVU64
 268              		.thumb
 269              		.syntax unified
 270              	.LBE8:
 271              	.LBE7:
  86:Src/main.c    **** 
 272              		.loc 1 86 3 is_stmt 1 view .LVU65
  86:Src/main.c    **** 
 273              		.loc 1 86 13 is_stmt 0 view .LVU66
 274 0012 044A     		ldr	r2, .L15+8
 275 0014 9360     		str	r3, [r2, #8]
  88:Src/main.c    **** }
 276              		.loc 1 88 3 is_stmt 1 view .LVU67
  88:Src/main.c    **** }
 277              		.loc 1 88 4 is_stmt 0 view .LVU68
 278 0016 A047     		blx	r4
 279              	.LVL8:
  89:Src/main.c    **** 
 280              		.loc 1 89 1 view .LVU69
 281 0018 10BD     		pop	{r4, pc}
 282              	.LVL9:
 283              	.L16:
  89:Src/main.c    **** 
 284              		.loc 1 89 1 view .LVU70
 285 001a 00BF     		.align	2
 286              	.L15:
 287 001c 04400008 		.word	134234116
 288 0020 00400008 		.word	134234112
 289 0024 00ED00E0 		.word	-536810240
 290              		.cfi_endproc
 291              	.LFE69:
 293              		.section	.text.is_button_down,"ax",%progbits
 294              		.align	1
 295              		.global	is_button_down
 296              		.syntax unified
 297              		.thumb
 298              		.thumb_func
 299              		.fpu softvfp
 301              	is_button_down:
 302              	.LFB70:
  92:Src/main.c    ****   if (HAL_GPIO_ReadPin(BTN_GPIO_PORT, BTN_GPIO_PIN) == GPIO_PIN_RESET)
ARM GAS  /tmp/ccBx6lvT.s 			page 17


 303              		.loc 1 92 1 is_stmt 1 view -0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 307 0000 08B5     		push	{r3, lr}
 308              	.LCFI4:
 309              		.cfi_def_cfa_offset 8
 310              		.cfi_offset 3, -8
 311              		.cfi_offset 14, -4
  93:Src/main.c    ****   {
 312              		.loc 1 93 3 view .LVU72
  93:Src/main.c    ****   {
 313              		.loc 1 93 7 is_stmt 0 view .LVU73
 314 0002 0121     		movs	r1, #1
 315 0004 0848     		ldr	r0, .L22
 316 0006 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 317              	.LVL10:
  93:Src/main.c    ****   {
 318              		.loc 1 93 6 view .LVU74
 319 000a 08B1     		cbz	r0, .L21
  98:Src/main.c    **** }
 320              		.loc 1 98 10 view .LVU75
 321 000c 0020     		movs	r0, #0
 322              	.L18:
  99:Src/main.c    **** 
 323              		.loc 1 99 1 view .LVU76
 324 000e 08BD     		pop	{r3, pc}
 325              	.L21:
  95:Src/main.c    ****     return (HAL_GPIO_ReadPin(BTN_GPIO_PORT, BTN_GPIO_PIN) == GPIO_PIN_RESET);
 326              		.loc 1 95 5 is_stmt 1 view .LVU77
 327 0010 C820     		movs	r0, #200
 328 0012 FFF7FEFF 		bl	HAL_Delay
 329              	.LVL11:
  96:Src/main.c    ****   }
 330              		.loc 1 96 5 view .LVU78
  96:Src/main.c    ****   }
 331              		.loc 1 96 13 is_stmt 0 view .LVU79
 332 0016 0121     		movs	r1, #1
 333 0018 0348     		ldr	r0, .L22
 334 001a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 335              	.LVL12:
  96:Src/main.c    ****   }
 336              		.loc 1 96 59 view .LVU80
 337 001e B0FA80F0 		clz	r0, r0
 338 0022 4009     		lsrs	r0, r0, #5
 339 0024 F3E7     		b	.L18
 340              	.L23:
 341 0026 00BF     		.align	2
 342              	.L22:
 343 0028 00080140 		.word	1073809408
 344              		.cfi_endproc
 345              	.LFE70:
 347              		.section	.text.SystemClock_Config,"ax",%progbits
 348              		.align	1
 349              		.global	SystemClock_Config
 350              		.syntax unified
 351              		.thumb
ARM GAS  /tmp/ccBx6lvT.s 			page 18


 352              		.thumb_func
 353              		.fpu softvfp
 355              	SystemClock_Config:
 356              	.LFB72:
 184:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 357              		.loc 1 184 1 is_stmt 1 view -0
 358              		.cfi_startproc
 359              		@ args = 0, pretend = 0, frame = 80
 360              		@ frame_needed = 0, uses_anonymous_args = 0
 361 0000 30B5     		push	{r4, r5, lr}
 362              	.LCFI5:
 363              		.cfi_def_cfa_offset 12
 364              		.cfi_offset 4, -12
 365              		.cfi_offset 5, -8
 366              		.cfi_offset 14, -4
 367 0002 95B0     		sub	sp, sp, #84
 368              	.LCFI6:
 369              		.cfi_def_cfa_offset 96
 185:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 370              		.loc 1 185 3 view .LVU82
 185:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 371              		.loc 1 185 22 is_stmt 0 view .LVU83
 372 0004 0024     		movs	r4, #0
 373 0006 0D94     		str	r4, [sp, #52]
 374 0008 0F94     		str	r4, [sp, #60]
 375 000a 1094     		str	r4, [sp, #64]
 186:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 376              		.loc 1 186 3 is_stmt 1 view .LVU84
 186:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 377              		.loc 1 186 22 is_stmt 0 view .LVU85
 378 000c 0594     		str	r4, [sp, #20]
 379 000e 0694     		str	r4, [sp, #24]
 380 0010 0794     		str	r4, [sp, #28]
 381 0012 0894     		str	r4, [sp, #32]
 382 0014 0994     		str	r4, [sp, #36]
 187:Src/main.c    **** 
 383              		.loc 1 187 3 is_stmt 1 view .LVU86
 187:Src/main.c    **** 
 384              		.loc 1 187 28 is_stmt 0 view .LVU87
 385 0016 0194     		str	r4, [sp, #4]
 386 0018 0294     		str	r4, [sp, #8]
 387 001a 0394     		str	r4, [sp, #12]
 388 001c 0494     		str	r4, [sp, #16]
 192:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 389              		.loc 1 192 3 is_stmt 1 view .LVU88
 192:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 390              		.loc 1 192 36 is_stmt 0 view .LVU89
 391 001e 0122     		movs	r2, #1
 392 0020 0A92     		str	r2, [sp, #40]
 193:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 393              		.loc 1 193 3 is_stmt 1 view .LVU90
 193:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 394              		.loc 1 193 30 is_stmt 0 view .LVU91
 395 0022 4FF48033 		mov	r3, #65536
 396 0026 0B93     		str	r3, [sp, #44]
 194:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 397              		.loc 1 194 3 is_stmt 1 view .LVU92
ARM GAS  /tmp/ccBx6lvT.s 			page 19


 194:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 398              		.loc 1 194 36 is_stmt 0 view .LVU93
 399 0028 0C94     		str	r4, [sp, #48]
 195:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 400              		.loc 1 195 3 is_stmt 1 view .LVU94
 195:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 401              		.loc 1 195 30 is_stmt 0 view .LVU95
 402 002a 0E92     		str	r2, [sp, #56]
 196:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 403              		.loc 1 196 3 is_stmt 1 view .LVU96
 196:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 404              		.loc 1 196 34 is_stmt 0 view .LVU97
 405 002c 0225     		movs	r5, #2
 406 002e 1195     		str	r5, [sp, #68]
 197:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 407              		.loc 1 197 3 is_stmt 1 view .LVU98
 197:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 408              		.loc 1 197 35 is_stmt 0 view .LVU99
 409 0030 1293     		str	r3, [sp, #72]
 198:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 410              		.loc 1 198 3 is_stmt 1 view .LVU100
 198:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 411              		.loc 1 198 32 is_stmt 0 view .LVU101
 412 0032 4FF4E013 		mov	r3, #1835008
 413 0036 1393     		str	r3, [sp, #76]
 199:Src/main.c    ****   {
 414              		.loc 1 199 3 is_stmt 1 view .LVU102
 199:Src/main.c    ****   {
 415              		.loc 1 199 7 is_stmt 0 view .LVU103
 416 0038 0AA8     		add	r0, sp, #40
 417 003a FFF7FEFF 		bl	HAL_RCC_OscConfig
 418              	.LVL13:
 205:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 419              		.loc 1 205 3 is_stmt 1 view .LVU104
 205:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 420              		.loc 1 205 31 is_stmt 0 view .LVU105
 421 003e 0F23     		movs	r3, #15
 422 0040 0593     		str	r3, [sp, #20]
 207:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 423              		.loc 1 207 3 is_stmt 1 view .LVU106
 207:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 424              		.loc 1 207 34 is_stmt 0 view .LVU107
 425 0042 0695     		str	r5, [sp, #24]
 208:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 426              		.loc 1 208 3 is_stmt 1 view .LVU108
 208:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 427              		.loc 1 208 35 is_stmt 0 view .LVU109
 428 0044 0794     		str	r4, [sp, #28]
 209:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 429              		.loc 1 209 3 is_stmt 1 view .LVU110
 209:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 430              		.loc 1 209 36 is_stmt 0 view .LVU111
 431 0046 4FF48063 		mov	r3, #1024
 432 004a 0893     		str	r3, [sp, #32]
 210:Src/main.c    **** 
 433              		.loc 1 210 3 is_stmt 1 view .LVU112
 210:Src/main.c    **** 
ARM GAS  /tmp/ccBx6lvT.s 			page 20


 434              		.loc 1 210 36 is_stmt 0 view .LVU113
 435 004c 0994     		str	r4, [sp, #36]
 212:Src/main.c    ****   {
 436              		.loc 1 212 3 is_stmt 1 view .LVU114
 212:Src/main.c    ****   {
 437              		.loc 1 212 7 is_stmt 0 view .LVU115
 438 004e 2946     		mov	r1, r5
 439 0050 05A8     		add	r0, sp, #20
 440 0052 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 441              	.LVL14:
 216:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 442              		.loc 1 216 3 is_stmt 1 view .LVU116
 216:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 443              		.loc 1 216 38 is_stmt 0 view .LVU117
 444 0056 1023     		movs	r3, #16
 445 0058 0193     		str	r3, [sp, #4]
 217:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 446              		.loc 1 217 3 is_stmt 1 view .LVU118
 217:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 447              		.loc 1 217 35 is_stmt 0 view .LVU119
 448 005a 0494     		str	r4, [sp, #16]
 218:Src/main.c    ****   {
 449              		.loc 1 218 3 is_stmt 1 view .LVU120
 218:Src/main.c    ****   {
 450              		.loc 1 218 7 is_stmt 0 view .LVU121
 451 005c 01A8     		add	r0, sp, #4
 452 005e FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 453              	.LVL15:
 222:Src/main.c    **** 
 454              		.loc 1 222 1 view .LVU122
 455 0062 15B0     		add	sp, sp, #84
 456              	.LCFI7:
 457              		.cfi_def_cfa_offset 12
 458              		@ sp needed
 459 0064 30BD     		pop	{r4, r5, pc}
 460              		.cfi_endproc
 461              	.LFE72:
 463              		.section	.text.main,"ax",%progbits
 464              		.align	1
 465              		.global	main
 466              		.syntax unified
 467              		.thumb
 468              		.thumb_func
 469              		.fpu softvfp
 471              	main:
 472              	.LFB71:
 108:Src/main.c    ****   /* USER CODE BEGIN 1 */
 473              		.loc 1 108 1 is_stmt 1 view -0
 474              		.cfi_startproc
 475              		@ Volatile: function does not return.
 476              		@ args = 0, pretend = 0, frame = 0
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478 0000 08B5     		push	{r3, lr}
 479              	.LCFI8:
 480              		.cfi_def_cfa_offset 8
 481              		.cfi_offset 3, -8
 482              		.cfi_offset 14, -4
ARM GAS  /tmp/ccBx6lvT.s 			page 21


 116:Src/main.c    **** 
 483              		.loc 1 116 3 view .LVU124
 484 0002 FFF7FEFF 		bl	HAL_Init
 485              	.LVL16:
 123:Src/main.c    **** 
 486              		.loc 1 123 3 view .LVU125
 487 0006 FFF7FEFF 		bl	SystemClock_Config
 488              	.LVL17:
 130:Src/main.c    ****   MX_USB_DEVICE_Init();
 489              		.loc 1 130 3 view .LVU126
 490 000a FFF7FEFF 		bl	MX_GPIO_Init
 491              	.LVL18:
 131:Src/main.c    ****   /* USER CODE BEGIN 2 */
 492              		.loc 1 131 3 view .LVU127
 493 000e FFF7FEFF 		bl	MX_USB_DEVICE_Init
 494              	.LVL19:
 134:Src/main.c    ****   {
 495              		.loc 1 134 3 view .LVU128
 134:Src/main.c    ****   {
 496              		.loc 1 134 7 is_stmt 0 view .LVU129
 497 0012 FFF7FEFF 		bl	is_appcode_exist
 498              	.LVL20:
 134:Src/main.c    ****   {
 499              		.loc 1 134 5 view .LVU130
 500 0016 10B1     		cbz	r0, .L27
 134:Src/main.c    ****   {
 501              		.loc 1 134 29 discriminator 1 view .LVU131
 502 0018 FFF7FEFF 		bl	is_button_down
 503              	.LVL21:
 134:Src/main.c    ****   {
 504              		.loc 1 134 26 discriminator 1 view .LVU132
 505 001c 58B3     		cbz	r0, .L28
 506              	.L27:
 136:Src/main.c    **** 
 507              		.loc 1 136 5 is_stmt 1 view .LVU133
 508 001e FFF7FEFF 		bl	MX_USB_DEVICE_Init
 509              	.LVL22:
 510 0022 13E0     		b	.L32
 511              	.L30:
 148:Src/main.c    ****           HAL_Delay(LED_On_Time);
 512              		.loc 1 148 11 view .LVU134
 513 0024 154D     		ldr	r5, .L36
 514 0026 0022     		movs	r2, #0
 515 0028 0221     		movs	r1, #2
 516 002a 2846     		mov	r0, r5
 517 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
 518              	.LVL23:
 149:Src/main.c    ****           LED_OFF;
 519              		.loc 1 149 11 view .LVU135
 520 0030 134C     		ldr	r4, .L36+4
 521 0032 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 522 0034 FFF7FEFF 		bl	HAL_Delay
 523              	.LVL24:
 150:Src/main.c    ****           HAL_Delay(LED_On_Time*3);
 524              		.loc 1 150 11 view .LVU136
 525 0038 0122     		movs	r2, #1
 526 003a 0221     		movs	r1, #2
ARM GAS  /tmp/ccBx6lvT.s 			page 22


 527 003c 2846     		mov	r0, r5
 528 003e FFF7FEFF 		bl	HAL_GPIO_WritePin
 529              	.LVL25:
 151:Src/main.c    ****           break;
 530              		.loc 1 151 11 view .LVU137
 151:Src/main.c    ****           break;
 531              		.loc 1 151 32 is_stmt 0 view .LVU138
 532 0042 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 151:Src/main.c    ****           break;
 533              		.loc 1 151 11 view .LVU139
 534 0044 00EB4000 		add	r0, r0, r0, lsl #1
 535 0048 FFF7FEFF 		bl	HAL_Delay
 536              	.LVL26:
 152:Src/main.c    **** 
 537              		.loc 1 152 11 is_stmt 1 view .LVU140
 538              	.L32:
 138:Src/main.c    ****     {
 539              		.loc 1 138 5 view .LVU141
 141:Src/main.c    ****       {
 540              		.loc 1 141 7 view .LVU142
 541 004c 0C4B     		ldr	r3, .L36+4
 542 004e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 543 0050 DBB2     		uxtb	r3, r3
 544 0052 FA2B     		cmp	r3, #250
 545 0054 E6D0     		beq	.L30
 546 0056 FF2B     		cmp	r3, #255
 547 0058 07D0     		beq	.L31
 548 005a 002B     		cmp	r3, #0
 549 005c F6D1     		bne	.L32
 144:Src/main.c    ****           break;
 550              		.loc 1 144 11 view .LVU143
 551 005e 0122     		movs	r2, #1
 552 0060 0221     		movs	r1, #2
 553 0062 0648     		ldr	r0, .L36
 554 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
 555              	.LVL27:
 145:Src/main.c    **** 
 556              		.loc 1 145 11 view .LVU144
 557 0068 F0E7     		b	.L32
 558              	.L31:
 155:Src/main.c    ****           break;
 559              		.loc 1 155 11 view .LVU145
 560 006a 0022     		movs	r2, #0
 561 006c 0221     		movs	r1, #2
 562 006e 0348     		ldr	r0, .L36
 563 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 564              	.LVL28:
 156:Src/main.c    ****       }
 565              		.loc 1 156 11 view .LVU146
 566 0074 EAE7     		b	.L32
 567              	.L28:
 163:Src/main.c    ****   }
 568              		.loc 1 163 5 view .LVU147
 569 0076 FFF7FEFF 		bl	jmp_to_appcode
 570              	.LVL29:
 571              	.L34:
 170:Src/main.c    ****   {
ARM GAS  /tmp/ccBx6lvT.s 			page 23


 572              		.loc 1 170 3 discriminator 1 view .LVU148
 175:Src/main.c    ****   /* USER CODE END 3 */
 573              		.loc 1 175 3 discriminator 1 view .LVU149
 170:Src/main.c    ****   {
 574              		.loc 1 170 9 discriminator 1 view .LVU150
 575 007a FEE7     		b	.L34
 576              	.L37:
 577              		.align	2
 578              	.L36:
 579 007c 00100140 		.word	1073811456
 580 0080 00000000 		.word	.LANCHOR0
 581              		.cfi_endproc
 582              	.LFE71:
 584              		.section	.text.Error_Handler,"ax",%progbits
 585              		.align	1
 586              		.global	Error_Handler
 587              		.syntax unified
 588              		.thumb
 589              		.thumb_func
 590              		.fpu softvfp
 592              	Error_Handler:
 593              	.LFB74:
 255:Src/main.c    **** 
 256:Src/main.c    **** /* USER CODE BEGIN 4 */
 257:Src/main.c    **** 
 258:Src/main.c    **** /* USER CODE END 4 */
 259:Src/main.c    **** 
 260:Src/main.c    **** /**
 261:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 262:Src/main.c    ****   * @retval None
 263:Src/main.c    ****   */
 264:Src/main.c    **** void Error_Handler(void)
 265:Src/main.c    **** {
 594              		.loc 1 265 1 view -0
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 0
 597              		@ frame_needed = 0, uses_anonymous_args = 0
 598              		@ link register save eliminated.
 266:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 267:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 268:Src/main.c    **** 
 269:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 270:Src/main.c    **** }
 599              		.loc 1 270 1 view .LVU152
 600 0000 7047     		bx	lr
 601              		.cfi_endproc
 602              	.LFE74:
 604              		.global	LED_On_Time
 605              		.section	.data.LED_On_Time,"aw"
 606              		.set	.LANCHOR0,. + 0
 609              	LED_On_Time:
 610 0000 FA       		.byte	-6
 611              		.text
 612              	.Letext0:
 613              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 614              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 615              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
ARM GAS  /tmp/ccBx6lvT.s 			page 24


 616              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 617              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 618              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 619              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 620              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 621              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 622              		.file 12 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 623              		.file 13 "/usr/include/newlib/sys/_types.h"
 624              		.file 14 "/usr/include/newlib/sys/reent.h"
 625              		.file 15 "/usr/include/newlib/sys/lock.h"
 626              		.file 16 "/usr/include/newlib/stdlib.h"
 627              		.file 17 "Inc/YAB_F103_config.h"
 628              		.file 18 "Inc/usb_device.h"
ARM GAS  /tmp/ccBx6lvT.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccBx6lvT.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccBx6lvT.s:23     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccBx6lvT.s:142    .text.MX_GPIO_Init:0000000000000078 $d
     /tmp/ccBx6lvT.s:149    .text.is_appcode_exist:0000000000000000 $t
     /tmp/ccBx6lvT.s:156    .text.is_appcode_exist:0000000000000000 is_appcode_exist
     /tmp/ccBx6lvT.s:218    .text.is_appcode_exist:0000000000000044 $d
     /tmp/ccBx6lvT.s:226    .text.jmp_to_appcode:0000000000000000 $t
     /tmp/ccBx6lvT.s:233    .text.jmp_to_appcode:0000000000000000 jmp_to_appcode
     /tmp/ccBx6lvT.s:287    .text.jmp_to_appcode:000000000000001c $d
     /tmp/ccBx6lvT.s:294    .text.is_button_down:0000000000000000 $t
     /tmp/ccBx6lvT.s:301    .text.is_button_down:0000000000000000 is_button_down
     /tmp/ccBx6lvT.s:343    .text.is_button_down:0000000000000028 $d
     /tmp/ccBx6lvT.s:348    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccBx6lvT.s:355    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccBx6lvT.s:464    .text.main:0000000000000000 $t
     /tmp/ccBx6lvT.s:471    .text.main:0000000000000000 main
     /tmp/ccBx6lvT.s:579    .text.main:000000000000007c $d
     /tmp/ccBx6lvT.s:585    .text.Error_Handler:0000000000000000 $t
     /tmp/ccBx6lvT.s:592    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccBx6lvT.s:609    .data.LED_On_Time:0000000000000000 LED_On_Time

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_DeInit
HAL_GPIO_ReadPin
HAL_Delay
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_USB_DEVICE_Init
