ARM GAS  /tmp/cc9l5l7w.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"usbd_storage_if.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.STORAGE_Init_FS,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	STORAGE_Init_FS:
  24              	.LVL0:
  25              	.LFB70:
  26              		.file 1 "Src/usbd_storage_if.c"
   1:Src/usbd_storage_if.c **** /* USER CODE BEGIN Header */
   2:Src/usbd_storage_if.c **** /**
   3:Src/usbd_storage_if.c ****   ******************************************************************************
   4:Src/usbd_storage_if.c ****   * @file           : usbd_storage_if.c
   5:Src/usbd_storage_if.c ****   * @version        : v2.0_Cube
   6:Src/usbd_storage_if.c ****   * @brief          : Memory management layer.
   7:Src/usbd_storage_if.c ****   ******************************************************************************
   8:Src/usbd_storage_if.c ****   * @attention
   9:Src/usbd_storage_if.c ****   *
  10:Src/usbd_storage_if.c ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  11:Src/usbd_storage_if.c ****   * All rights reserved.</center></h2>
  12:Src/usbd_storage_if.c ****   *
  13:Src/usbd_storage_if.c ****   * This software component is licensed by ST under Ultimate Liberty license
  14:Src/usbd_storage_if.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  15:Src/usbd_storage_if.c ****   * the License. You may obtain a copy of the License at:
  16:Src/usbd_storage_if.c ****   *                             www.st.com/SLA0044
  17:Src/usbd_storage_if.c ****   *
  18:Src/usbd_storage_if.c ****   ******************************************************************************
  19:Src/usbd_storage_if.c ****   */
  20:Src/usbd_storage_if.c **** /* USER CODE END Header */
  21:Src/usbd_storage_if.c **** 
  22:Src/usbd_storage_if.c **** /* Includes ------------------------------------------------------------------*/
  23:Src/usbd_storage_if.c **** #include "usbd_storage_if.h"
  24:Src/usbd_storage_if.c **** 
  25:Src/usbd_storage_if.c **** /* USER CODE BEGIN INCLUDE */
  26:Src/usbd_storage_if.c **** #include "YAB_fat32.h"
  27:Src/usbd_storage_if.c **** 
  28:Src/usbd_storage_if.c **** /* USER CODE END INCLUDE */
  29:Src/usbd_storage_if.c **** 
  30:Src/usbd_storage_if.c **** /* Private typedef -----------------------------------------------------------*/
  31:Src/usbd_storage_if.c **** /* Private define ------------------------------------------------------------*/
  32:Src/usbd_storage_if.c **** /* Private macro -------------------------------------------------------------*/
ARM GAS  /tmp/cc9l5l7w.s 			page 2


  33:Src/usbd_storage_if.c **** 
  34:Src/usbd_storage_if.c **** /* USER CODE BEGIN PV */
  35:Src/usbd_storage_if.c **** /* Private variables ---------------------------------------------------------*/
  36:Src/usbd_storage_if.c **** 
  37:Src/usbd_storage_if.c **** /* USER CODE END PV */
  38:Src/usbd_storage_if.c **** 
  39:Src/usbd_storage_if.c **** /** @addtogroup STM32_USB_OTG_DEVICE_LIBRARY
  40:Src/usbd_storage_if.c ****   * @brief Usb device.
  41:Src/usbd_storage_if.c ****   * @{
  42:Src/usbd_storage_if.c ****   */
  43:Src/usbd_storage_if.c **** 
  44:Src/usbd_storage_if.c **** /** @defgroup USBD_STORAGE
  45:Src/usbd_storage_if.c ****   * @brief Usb mass storage device module
  46:Src/usbd_storage_if.c ****   * @{
  47:Src/usbd_storage_if.c ****   */
  48:Src/usbd_storage_if.c **** 
  49:Src/usbd_storage_if.c **** /** @defgroup USBD_STORAGE_Private_TypesDefinitions
  50:Src/usbd_storage_if.c ****   * @brief Private types.
  51:Src/usbd_storage_if.c ****   * @{
  52:Src/usbd_storage_if.c ****   */
  53:Src/usbd_storage_if.c **** 
  54:Src/usbd_storage_if.c **** /* USER CODE BEGIN PRIVATE_TYPES */
  55:Src/usbd_storage_if.c **** 
  56:Src/usbd_storage_if.c **** /* USER CODE END PRIVATE_TYPES */
  57:Src/usbd_storage_if.c **** 
  58:Src/usbd_storage_if.c **** /**
  59:Src/usbd_storage_if.c ****   * @}
  60:Src/usbd_storage_if.c ****   */
  61:Src/usbd_storage_if.c **** 
  62:Src/usbd_storage_if.c **** /** @defgroup USBD_STORAGE_Private_Defines
  63:Src/usbd_storage_if.c ****   * @brief Private defines.
  64:Src/usbd_storage_if.c ****   * @{
  65:Src/usbd_storage_if.c ****   */
  66:Src/usbd_storage_if.c **** 
  67:Src/usbd_storage_if.c **** #define STORAGE_LUN_NBR                  1
  68:Src/usbd_storage_if.c **** #define STORAGE_BLK_NBR                  0x10000
  69:Src/usbd_storage_if.c **** #define STORAGE_BLK_SIZ                  0x200
  70:Src/usbd_storage_if.c **** 
  71:Src/usbd_storage_if.c **** /* USER CODE BEGIN PRIVATE_DEFINES */
  72:Src/usbd_storage_if.c **** 
  73:Src/usbd_storage_if.c **** /* USER CODE END PRIVATE_DEFINES */
  74:Src/usbd_storage_if.c **** 
  75:Src/usbd_storage_if.c **** /**
  76:Src/usbd_storage_if.c ****   * @}
  77:Src/usbd_storage_if.c ****   */
  78:Src/usbd_storage_if.c **** 
  79:Src/usbd_storage_if.c **** /** @defgroup USBD_STORAGE_Private_Macros
  80:Src/usbd_storage_if.c ****   * @brief Private macros.
  81:Src/usbd_storage_if.c ****   * @{
  82:Src/usbd_storage_if.c ****   */
  83:Src/usbd_storage_if.c **** 
  84:Src/usbd_storage_if.c **** /* USER CODE BEGIN PRIVATE_MACRO */
  85:Src/usbd_storage_if.c **** 
  86:Src/usbd_storage_if.c **** /* USER CODE END PRIVATE_MACRO */
  87:Src/usbd_storage_if.c **** 
  88:Src/usbd_storage_if.c **** /**
  89:Src/usbd_storage_if.c ****   * @}
ARM GAS  /tmp/cc9l5l7w.s 			page 3


  90:Src/usbd_storage_if.c ****   */
  91:Src/usbd_storage_if.c **** 
  92:Src/usbd_storage_if.c **** /** @defgroup USBD_STORAGE_Private_Variables
  93:Src/usbd_storage_if.c ****   * @brief Private variables.
  94:Src/usbd_storage_if.c ****   * @{
  95:Src/usbd_storage_if.c ****   */
  96:Src/usbd_storage_if.c **** 
  97:Src/usbd_storage_if.c **** /* USER CODE BEGIN INQUIRY_DATA_FS */
  98:Src/usbd_storage_if.c **** /** USB Mass storage Standard Inquiry Data. */
  99:Src/usbd_storage_if.c **** const int8_t STORAGE_Inquirydata_FS[] = {/* 36 */
 100:Src/usbd_storage_if.c **** 
 101:Src/usbd_storage_if.c ****   /* LUN 0 */
 102:Src/usbd_storage_if.c ****   0x00,
 103:Src/usbd_storage_if.c ****   0x80,
 104:Src/usbd_storage_if.c ****   0x02,
 105:Src/usbd_storage_if.c ****   0x02,
 106:Src/usbd_storage_if.c ****   (STANDARD_INQUIRY_DATA_LEN - 5),
 107:Src/usbd_storage_if.c ****   0x00,
 108:Src/usbd_storage_if.c ****   0x00,
 109:Src/usbd_storage_if.c ****   0x00,
 110:Src/usbd_storage_if.c ****   'S', 'T', 'M', ' ', ' ', ' ', ' ', ' ', /* Manufacturer : 8 bytes */
 111:Src/usbd_storage_if.c ****   'P', 'r', 'o', 'd', 'u', 'c', 't', ' ', /* Product      : 16 Bytes */
 112:Src/usbd_storage_if.c ****   ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
 113:Src/usbd_storage_if.c ****   '0', '.', '0' ,'1'                      /* Version      : 4 Bytes */
 114:Src/usbd_storage_if.c **** };
 115:Src/usbd_storage_if.c **** /* USER CODE END INQUIRY_DATA_FS */
 116:Src/usbd_storage_if.c **** 
 117:Src/usbd_storage_if.c **** /* USER CODE BEGIN PRIVATE_VARIABLES */
 118:Src/usbd_storage_if.c **** 
 119:Src/usbd_storage_if.c **** /* USER CODE END PRIVATE_VARIABLES */
 120:Src/usbd_storage_if.c **** 
 121:Src/usbd_storage_if.c **** /**
 122:Src/usbd_storage_if.c ****   * @}
 123:Src/usbd_storage_if.c ****   */
 124:Src/usbd_storage_if.c **** 
 125:Src/usbd_storage_if.c **** /** @defgroup USBD_STORAGE_Exported_Variables
 126:Src/usbd_storage_if.c ****   * @brief Public variables.
 127:Src/usbd_storage_if.c ****   * @{
 128:Src/usbd_storage_if.c ****   */
 129:Src/usbd_storage_if.c **** 
 130:Src/usbd_storage_if.c **** extern USBD_HandleTypeDef hUsbDeviceFS;
 131:Src/usbd_storage_if.c **** 
 132:Src/usbd_storage_if.c **** /* USER CODE BEGIN EXPORTED_VARIABLES */
 133:Src/usbd_storage_if.c **** 
 134:Src/usbd_storage_if.c **** /* USER CODE END EXPORTED_VARIABLES */
 135:Src/usbd_storage_if.c **** 
 136:Src/usbd_storage_if.c **** /**
 137:Src/usbd_storage_if.c ****   * @}
 138:Src/usbd_storage_if.c ****   */
 139:Src/usbd_storage_if.c **** 
 140:Src/usbd_storage_if.c **** /** @defgroup USBD_STORAGE_Private_FunctionPrototypes
 141:Src/usbd_storage_if.c ****   * @brief Private functions declaration.
 142:Src/usbd_storage_if.c ****   * @{
 143:Src/usbd_storage_if.c ****   */
 144:Src/usbd_storage_if.c **** 
 145:Src/usbd_storage_if.c **** static int8_t STORAGE_Init_FS(uint8_t lun);
 146:Src/usbd_storage_if.c **** static int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size);
ARM GAS  /tmp/cc9l5l7w.s 			page 4


 147:Src/usbd_storage_if.c **** static int8_t STORAGE_IsReady_FS(uint8_t lun);
 148:Src/usbd_storage_if.c **** static int8_t STORAGE_IsWriteProtected_FS(uint8_t lun);
 149:Src/usbd_storage_if.c **** static int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len);
 150:Src/usbd_storage_if.c **** static int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len);
 151:Src/usbd_storage_if.c **** static int8_t STORAGE_GetMaxLun_FS(void);
 152:Src/usbd_storage_if.c **** 
 153:Src/usbd_storage_if.c **** /* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
 154:Src/usbd_storage_if.c **** static void _STORAGE_ReadBlocks(uint32_t *buf, uint64_t readAddr, uint32_t blockSize, uint32_t numO
 155:Src/usbd_storage_if.c **** {
 156:Src/usbd_storage_if.c ****   uint32_t iBlock;
 157:Src/usbd_storage_if.c ****   uint8_t* buf8 = (uint8_t*)buf;
 158:Src/usbd_storage_if.c ****   
 159:Src/usbd_storage_if.c ****   for(iBlock=0; iBlock<numOfBlocks; iBlock++)
 160:Src/usbd_storage_if.c ****   {
 161:Src/usbd_storage_if.c ****     fat32_read(buf8, (uint32_t)readAddr);
 162:Src/usbd_storage_if.c ****     readAddr += blockSize;
 163:Src/usbd_storage_if.c ****     buf8 += blockSize;
 164:Src/usbd_storage_if.c ****   }
 165:Src/usbd_storage_if.c **** }
 166:Src/usbd_storage_if.c **** 
 167:Src/usbd_storage_if.c **** static void _STORAGE_WriteBlocks(uint32_t *buf, uint64_t writeAddr, uint32_t blockSize, uint32_t nu
 168:Src/usbd_storage_if.c **** {
 169:Src/usbd_storage_if.c ****   uint32_t iBlock;
 170:Src/usbd_storage_if.c ****   uint8_t* buf8 = (uint8_t*)buf;
 171:Src/usbd_storage_if.c ****   
 172:Src/usbd_storage_if.c ****   for(iBlock=0; iBlock<numOfBlocks; iBlock++)
 173:Src/usbd_storage_if.c ****   {
 174:Src/usbd_storage_if.c ****     fat32_write(buf8, (uint32_t)writeAddr);
 175:Src/usbd_storage_if.c ****     writeAddr += blockSize;
 176:Src/usbd_storage_if.c ****     buf8 += blockSize;
 177:Src/usbd_storage_if.c ****   }
 178:Src/usbd_storage_if.c **** }
 179:Src/usbd_storage_if.c **** /* USER CODE END PRIVATE_FUNCTIONS_DECLARATION */
 180:Src/usbd_storage_if.c **** 
 181:Src/usbd_storage_if.c **** /**
 182:Src/usbd_storage_if.c ****   * @}
 183:Src/usbd_storage_if.c ****   */
 184:Src/usbd_storage_if.c **** 
 185:Src/usbd_storage_if.c **** USBD_StorageTypeDef USBD_Storage_Interface_fops_FS =
 186:Src/usbd_storage_if.c **** {
 187:Src/usbd_storage_if.c ****   STORAGE_Init_FS,
 188:Src/usbd_storage_if.c ****   STORAGE_GetCapacity_FS,
 189:Src/usbd_storage_if.c ****   STORAGE_IsReady_FS,
 190:Src/usbd_storage_if.c ****   STORAGE_IsWriteProtected_FS,
 191:Src/usbd_storage_if.c ****   STORAGE_Read_FS,
 192:Src/usbd_storage_if.c ****   STORAGE_Write_FS,
 193:Src/usbd_storage_if.c ****   STORAGE_GetMaxLun_FS,
 194:Src/usbd_storage_if.c ****   (int8_t *)STORAGE_Inquirydata_FS
 195:Src/usbd_storage_if.c **** };
 196:Src/usbd_storage_if.c **** 
 197:Src/usbd_storage_if.c **** /* Private functions ---------------------------------------------------------*/
 198:Src/usbd_storage_if.c **** /**
 199:Src/usbd_storage_if.c ****   * @brief  Initializes over USB FS IP
 200:Src/usbd_storage_if.c ****   * @param  lun:
 201:Src/usbd_storage_if.c ****   * @retval USBD_OK if all operations are OK else USBD_FAIL
 202:Src/usbd_storage_if.c ****   */
 203:Src/usbd_storage_if.c **** int8_t STORAGE_Init_FS(uint8_t lun)
ARM GAS  /tmp/cc9l5l7w.s 			page 5


 204:Src/usbd_storage_if.c **** {
  27              		.loc 1 204 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 205:Src/usbd_storage_if.c ****   /* USER CODE BEGIN 2 */
 206:Src/usbd_storage_if.c ****   return (USBD_OK);
  32              		.loc 1 206 3 view .LVU1
 207:Src/usbd_storage_if.c ****   /* USER CODE END 2 */
 208:Src/usbd_storage_if.c **** }
  33              		.loc 1 208 1 is_stmt 0 view .LVU2
  34 0000 0020     		movs	r0, #0
  35              	.LVL1:
  36              		.loc 1 208 1 view .LVU3
  37 0002 7047     		bx	lr
  38              		.cfi_endproc
  39              	.LFE70:
  41              		.section	.text.STORAGE_GetCapacity_FS,"ax",%progbits
  42              		.align	1
  43              		.syntax unified
  44              		.thumb
  45              		.thumb_func
  46              		.fpu softvfp
  48              	STORAGE_GetCapacity_FS:
  49              	.LVL2:
  50              	.LFB71:
 209:Src/usbd_storage_if.c **** 
 210:Src/usbd_storage_if.c **** /**
 211:Src/usbd_storage_if.c ****   * @brief  .
 212:Src/usbd_storage_if.c ****   * @param  lun: .
 213:Src/usbd_storage_if.c ****   * @param  block_num: .
 214:Src/usbd_storage_if.c ****   * @param  block_size: .
 215:Src/usbd_storage_if.c ****   * @retval USBD_OK if all operations are OK else USBD_FAIL
 216:Src/usbd_storage_if.c ****   */
 217:Src/usbd_storage_if.c **** int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
 218:Src/usbd_storage_if.c **** {
  51              		.loc 1 218 1 is_stmt 1 view -0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
 219:Src/usbd_storage_if.c ****   /* USER CODE BEGIN 3 */
 220:Src/usbd_storage_if.c ****   *block_num  = STORAGE_BLK_NBR;
  56              		.loc 1 220 3 view .LVU5
  57              		.loc 1 220 15 is_stmt 0 view .LVU6
  58 0000 4FF48033 		mov	r3, #65536
  59 0004 0B60     		str	r3, [r1]
 221:Src/usbd_storage_if.c ****   *block_size = STORAGE_BLK_SIZ;
  60              		.loc 1 221 3 is_stmt 1 view .LVU7
  61              		.loc 1 221 15 is_stmt 0 view .LVU8
  62 0006 4FF40073 		mov	r3, #512
  63 000a 1380     		strh	r3, [r2]	@ movhi
 222:Src/usbd_storage_if.c ****   return (USBD_OK);
  64              		.loc 1 222 3 is_stmt 1 view .LVU9
 223:Src/usbd_storage_if.c ****   /* USER CODE END 3 */
 224:Src/usbd_storage_if.c **** }
ARM GAS  /tmp/cc9l5l7w.s 			page 6


  65              		.loc 1 224 1 is_stmt 0 view .LVU10
  66 000c 0020     		movs	r0, #0
  67              	.LVL3:
  68              		.loc 1 224 1 view .LVU11
  69 000e 7047     		bx	lr
  70              		.cfi_endproc
  71              	.LFE71:
  73              		.section	.text.STORAGE_IsReady_FS,"ax",%progbits
  74              		.align	1
  75              		.syntax unified
  76              		.thumb
  77              		.thumb_func
  78              		.fpu softvfp
  80              	STORAGE_IsReady_FS:
  81              	.LVL4:
  82              	.LFB72:
 225:Src/usbd_storage_if.c **** 
 226:Src/usbd_storage_if.c **** /**
 227:Src/usbd_storage_if.c ****   * @brief  .
 228:Src/usbd_storage_if.c ****   * @param  lun: .
 229:Src/usbd_storage_if.c ****   * @retval USBD_OK if all operations are OK else USBD_FAIL
 230:Src/usbd_storage_if.c ****   */
 231:Src/usbd_storage_if.c **** int8_t STORAGE_IsReady_FS(uint8_t lun)
 232:Src/usbd_storage_if.c **** {
  83              		.loc 1 232 1 is_stmt 1 view -0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 0, uses_anonymous_args = 0
  87              		@ link register save eliminated.
 233:Src/usbd_storage_if.c ****   /* USER CODE BEGIN 4 */
 234:Src/usbd_storage_if.c ****   return (USBD_OK);
  88              		.loc 1 234 3 view .LVU13
 235:Src/usbd_storage_if.c ****   /* USER CODE END 4 */
 236:Src/usbd_storage_if.c **** }
  89              		.loc 1 236 1 is_stmt 0 view .LVU14
  90 0000 0020     		movs	r0, #0
  91              	.LVL5:
  92              		.loc 1 236 1 view .LVU15
  93 0002 7047     		bx	lr
  94              		.cfi_endproc
  95              	.LFE72:
  97              		.section	.text.STORAGE_IsWriteProtected_FS,"ax",%progbits
  98              		.align	1
  99              		.syntax unified
 100              		.thumb
 101              		.thumb_func
 102              		.fpu softvfp
 104              	STORAGE_IsWriteProtected_FS:
 105              	.LVL6:
 106              	.LFB73:
 237:Src/usbd_storage_if.c **** 
 238:Src/usbd_storage_if.c **** /**
 239:Src/usbd_storage_if.c ****   * @brief  .
 240:Src/usbd_storage_if.c ****   * @param  lun: .
 241:Src/usbd_storage_if.c ****   * @retval USBD_OK if all operations are OK else USBD_FAIL
 242:Src/usbd_storage_if.c ****   */
 243:Src/usbd_storage_if.c **** int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
ARM GAS  /tmp/cc9l5l7w.s 			page 7


 244:Src/usbd_storage_if.c **** {
 107              		.loc 1 244 1 is_stmt 1 view -0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 0
 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111              		@ link register save eliminated.
 245:Src/usbd_storage_if.c ****   /* USER CODE BEGIN 5 */
 246:Src/usbd_storage_if.c ****   return (USBD_OK);
 112              		.loc 1 246 3 view .LVU17
 247:Src/usbd_storage_if.c ****   /* USER CODE END 5 */
 248:Src/usbd_storage_if.c **** }
 113              		.loc 1 248 1 is_stmt 0 view .LVU18
 114 0000 0020     		movs	r0, #0
 115              	.LVL7:
 116              		.loc 1 248 1 view .LVU19
 117 0002 7047     		bx	lr
 118              		.cfi_endproc
 119              	.LFE73:
 121              		.section	.text.STORAGE_GetMaxLun_FS,"ax",%progbits
 122              		.align	1
 123              		.syntax unified
 124              		.thumb
 125              		.thumb_func
 126              		.fpu softvfp
 128              	STORAGE_GetMaxLun_FS:
 129              	.LFB76:
 249:Src/usbd_storage_if.c **** 
 250:Src/usbd_storage_if.c **** /**
 251:Src/usbd_storage_if.c ****   * @brief  .
 252:Src/usbd_storage_if.c ****   * @param  lun: .
 253:Src/usbd_storage_if.c ****   * @retval USBD_OK if all operations are OK else USBD_FAIL
 254:Src/usbd_storage_if.c ****   */
 255:Src/usbd_storage_if.c **** int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
 256:Src/usbd_storage_if.c **** {
 257:Src/usbd_storage_if.c ****   /* USER CODE BEGIN 6 */
 258:Src/usbd_storage_if.c ****   _STORAGE_ReadBlocks((uint32_t *)buf, (uint64_t)(blk_addr * STORAGE_BLK_SIZ), STORAGE_BLK_SIZ, blk
 259:Src/usbd_storage_if.c ****   return (USBD_OK);
 260:Src/usbd_storage_if.c ****   /* USER CODE END 6 */
 261:Src/usbd_storage_if.c **** }
 262:Src/usbd_storage_if.c **** 
 263:Src/usbd_storage_if.c **** /**
 264:Src/usbd_storage_if.c ****   * @brief  .
 265:Src/usbd_storage_if.c ****   * @param  lun: .
 266:Src/usbd_storage_if.c ****   * @retval USBD_OK if all operations are OK else USBD_FAIL
 267:Src/usbd_storage_if.c ****   */
 268:Src/usbd_storage_if.c **** int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
 269:Src/usbd_storage_if.c **** {
 270:Src/usbd_storage_if.c ****   /* USER CODE BEGIN 7 */
 271:Src/usbd_storage_if.c ****   _STORAGE_WriteBlocks((uint32_t *)buf, (uint64_t)(blk_addr * STORAGE_BLK_SIZ), STORAGE_BLK_SIZ, bl
 272:Src/usbd_storage_if.c ****   return (USBD_OK);
 273:Src/usbd_storage_if.c ****   /* USER CODE END 7 */
 274:Src/usbd_storage_if.c **** }
 275:Src/usbd_storage_if.c **** 
 276:Src/usbd_storage_if.c **** /**
 277:Src/usbd_storage_if.c ****   * @brief  .
 278:Src/usbd_storage_if.c ****   * @param  None
 279:Src/usbd_storage_if.c ****   * @retval .
ARM GAS  /tmp/cc9l5l7w.s 			page 8


 280:Src/usbd_storage_if.c ****   */
 281:Src/usbd_storage_if.c **** int8_t STORAGE_GetMaxLun_FS(void)
 282:Src/usbd_storage_if.c **** {
 130              		.loc 1 282 1 is_stmt 1 view -0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 0
 133              		@ frame_needed = 0, uses_anonymous_args = 0
 134              		@ link register save eliminated.
 283:Src/usbd_storage_if.c ****   /* USER CODE BEGIN 8 */
 284:Src/usbd_storage_if.c ****   return (STORAGE_LUN_NBR - 1);
 135              		.loc 1 284 3 view .LVU21
 285:Src/usbd_storage_if.c ****   /* USER CODE END 8 */
 286:Src/usbd_storage_if.c **** }
 136              		.loc 1 286 1 is_stmt 0 view .LVU22
 137 0000 0020     		movs	r0, #0
 138 0002 7047     		bx	lr
 139              		.cfi_endproc
 140              	.LFE76:
 142              		.section	.text._STORAGE_WriteBlocks,"ax",%progbits
 143              		.align	1
 144              		.syntax unified
 145              		.thumb
 146              		.thumb_func
 147              		.fpu softvfp
 149              	_STORAGE_WriteBlocks:
 150              	.LVL8:
 151              	.LFB69:
 168:Src/usbd_storage_if.c ****   uint32_t iBlock;
 152              		.loc 1 168 1 is_stmt 1 view -0
 153              		.cfi_startproc
 154              		@ args = 8, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 168:Src/usbd_storage_if.c ****   uint32_t iBlock;
 156              		.loc 1 168 1 is_stmt 0 view .LVU24
 157 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 158              	.LCFI0:
 159              		.cfi_def_cfa_offset 32
 160              		.cfi_offset 3, -32
 161              		.cfi_offset 4, -28
 162              		.cfi_offset 5, -24
 163              		.cfi_offset 6, -20
 164              		.cfi_offset 7, -16
 165              		.cfi_offset 8, -12
 166              		.cfi_offset 9, -8
 167              		.cfi_offset 14, -4
 168 0004 0646     		mov	r6, r0
 169 0006 1446     		mov	r4, r2
 170 0008 1D46     		mov	r5, r3
 171 000a DDF82080 		ldr	r8, [sp, #32]
 172 000e DDF82490 		ldr	r9, [sp, #36]
 169:Src/usbd_storage_if.c ****   uint8_t* buf8 = (uint8_t*)buf;
 173              		.loc 1 169 3 is_stmt 1 view .LVU25
 170:Src/usbd_storage_if.c ****   
 174              		.loc 1 170 3 view .LVU26
 175              	.LVL9:
 172:Src/usbd_storage_if.c ****   {
 176              		.loc 1 172 3 view .LVU27
ARM GAS  /tmp/cc9l5l7w.s 			page 9


 172:Src/usbd_storage_if.c ****   {
 177              		.loc 1 172 13 is_stmt 0 view .LVU28
 178 0012 0027     		movs	r7, #0
 179              	.LVL10:
 180              	.L7:
 172:Src/usbd_storage_if.c ****   {
 181              		.loc 1 172 17 is_stmt 1 discriminator 1 view .LVU29
 172:Src/usbd_storage_if.c ****   {
 182              		.loc 1 172 3 is_stmt 0 discriminator 1 view .LVU30
 183 0014 4F45     		cmp	r7, r9
 184 0016 0AD2     		bcs	.L10
 174:Src/usbd_storage_if.c ****     writeAddr += blockSize;
 185              		.loc 1 174 5 is_stmt 1 discriminator 3 view .LVU31
 186 0018 2146     		mov	r1, r4
 187 001a 3046     		mov	r0, r6
 188 001c FFF7FEFF 		bl	fat32_write
 189              	.LVL11:
 175:Src/usbd_storage_if.c ****     buf8 += blockSize;
 190              		.loc 1 175 5 discriminator 3 view .LVU32
 175:Src/usbd_storage_if.c ****     buf8 += blockSize;
 191              		.loc 1 175 15 is_stmt 0 discriminator 3 view .LVU33
 192 0020 14EB0804 		adds	r4, r4, r8
 193              	.LVL12:
 175:Src/usbd_storage_if.c ****     buf8 += blockSize;
 194              		.loc 1 175 15 discriminator 3 view .LVU34
 195 0024 45F10005 		adc	r5, r5, #0
 196              	.LVL13:
 176:Src/usbd_storage_if.c ****   }
 197              		.loc 1 176 5 is_stmt 1 discriminator 3 view .LVU35
 176:Src/usbd_storage_if.c ****   }
 198              		.loc 1 176 10 is_stmt 0 discriminator 3 view .LVU36
 199 0028 4644     		add	r6, r6, r8
 200              	.LVL14:
 172:Src/usbd_storage_if.c ****   {
 201              		.loc 1 172 37 is_stmt 1 discriminator 3 view .LVU37
 172:Src/usbd_storage_if.c ****   {
 202              		.loc 1 172 43 is_stmt 0 discriminator 3 view .LVU38
 203 002a 0137     		adds	r7, r7, #1
 204              	.LVL15:
 172:Src/usbd_storage_if.c ****   {
 205              		.loc 1 172 43 discriminator 3 view .LVU39
 206 002c F2E7     		b	.L7
 207              	.L10:
 178:Src/usbd_storage_if.c **** /* USER CODE END PRIVATE_FUNCTIONS_DECLARATION */
 208              		.loc 1 178 1 view .LVU40
 209 002e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 178:Src/usbd_storage_if.c **** /* USER CODE END PRIVATE_FUNCTIONS_DECLARATION */
 210              		.loc 1 178 1 view .LVU41
 211              		.cfi_endproc
 212              	.LFE69:
 214              		.section	.text.STORAGE_Write_FS,"ax",%progbits
 215              		.align	1
 216              		.syntax unified
 217              		.thumb
 218              		.thumb_func
 219              		.fpu softvfp
 221              	STORAGE_Write_FS:
ARM GAS  /tmp/cc9l5l7w.s 			page 10


 222              	.LVL16:
 223              	.LFB75:
 269:Src/usbd_storage_if.c ****   /* USER CODE BEGIN 7 */
 224              		.loc 1 269 1 is_stmt 1 view -0
 225              		.cfi_startproc
 226              		@ args = 0, pretend = 0, frame = 0
 227              		@ frame_needed = 0, uses_anonymous_args = 0
 269:Src/usbd_storage_if.c ****   /* USER CODE BEGIN 7 */
 228              		.loc 1 269 1 is_stmt 0 view .LVU43
 229 0000 10B5     		push	{r4, lr}
 230              	.LCFI1:
 231              		.cfi_def_cfa_offset 8
 232              		.cfi_offset 4, -8
 233              		.cfi_offset 14, -4
 234 0002 82B0     		sub	sp, sp, #8
 235              	.LCFI2:
 236              		.cfi_def_cfa_offset 16
 271:Src/usbd_storage_if.c ****   return (USBD_OK);
 237              		.loc 1 271 3 is_stmt 1 view .LVU44
 238 0004 0024     		movs	r4, #0
 239 0006 0193     		str	r3, [sp, #4]
 240 0008 4FF40073 		mov	r3, #512
 241              	.LVL17:
 271:Src/usbd_storage_if.c ****   return (USBD_OK);
 242              		.loc 1 271 3 is_stmt 0 view .LVU45
 243 000c 0093     		str	r3, [sp]
 244 000e 5202     		lsls	r2, r2, #9
 245              	.LVL18:
 271:Src/usbd_storage_if.c ****   return (USBD_OK);
 246              		.loc 1 271 3 view .LVU46
 247 0010 2346     		mov	r3, r4
 248 0012 0846     		mov	r0, r1
 249              	.LVL19:
 271:Src/usbd_storage_if.c ****   return (USBD_OK);
 250              		.loc 1 271 3 view .LVU47
 251 0014 FFF7FEFF 		bl	_STORAGE_WriteBlocks
 252              	.LVL20:
 272:Src/usbd_storage_if.c ****   /* USER CODE END 7 */
 253              		.loc 1 272 3 is_stmt 1 view .LVU48
 274:Src/usbd_storage_if.c **** 
 254              		.loc 1 274 1 is_stmt 0 view .LVU49
 255 0018 2046     		mov	r0, r4
 256 001a 02B0     		add	sp, sp, #8
 257              	.LCFI3:
 258              		.cfi_def_cfa_offset 8
 259              		@ sp needed
 260 001c 10BD     		pop	{r4, pc}
 261              		.cfi_endproc
 262              	.LFE75:
 264              		.section	.text._STORAGE_ReadBlocks,"ax",%progbits
 265              		.align	1
 266              		.syntax unified
 267              		.thumb
 268              		.thumb_func
 269              		.fpu softvfp
 271              	_STORAGE_ReadBlocks:
 272              	.LVL21:
ARM GAS  /tmp/cc9l5l7w.s 			page 11


 273              	.LFB68:
 155:Src/usbd_storage_if.c ****   uint32_t iBlock;
 274              		.loc 1 155 1 is_stmt 1 view -0
 275              		.cfi_startproc
 276              		@ args = 8, pretend = 0, frame = 0
 277              		@ frame_needed = 0, uses_anonymous_args = 0
 155:Src/usbd_storage_if.c ****   uint32_t iBlock;
 278              		.loc 1 155 1 is_stmt 0 view .LVU51
 279 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 280              	.LCFI4:
 281              		.cfi_def_cfa_offset 32
 282              		.cfi_offset 3, -32
 283              		.cfi_offset 4, -28
 284              		.cfi_offset 5, -24
 285              		.cfi_offset 6, -20
 286              		.cfi_offset 7, -16
 287              		.cfi_offset 8, -12
 288              		.cfi_offset 9, -8
 289              		.cfi_offset 14, -4
 290 0004 0646     		mov	r6, r0
 291 0006 1446     		mov	r4, r2
 292 0008 1D46     		mov	r5, r3
 293 000a DDF82080 		ldr	r8, [sp, #32]
 294 000e DDF82490 		ldr	r9, [sp, #36]
 156:Src/usbd_storage_if.c ****   uint8_t* buf8 = (uint8_t*)buf;
 295              		.loc 1 156 3 is_stmt 1 view .LVU52
 157:Src/usbd_storage_if.c ****   
 296              		.loc 1 157 3 view .LVU53
 297              	.LVL22:
 159:Src/usbd_storage_if.c ****   {
 298              		.loc 1 159 3 view .LVU54
 159:Src/usbd_storage_if.c ****   {
 299              		.loc 1 159 13 is_stmt 0 view .LVU55
 300 0012 0027     		movs	r7, #0
 301              	.LVL23:
 302              	.L14:
 159:Src/usbd_storage_if.c ****   {
 303              		.loc 1 159 17 is_stmt 1 discriminator 1 view .LVU56
 159:Src/usbd_storage_if.c ****   {
 304              		.loc 1 159 3 is_stmt 0 discriminator 1 view .LVU57
 305 0014 4F45     		cmp	r7, r9
 306 0016 0AD2     		bcs	.L17
 161:Src/usbd_storage_if.c ****     readAddr += blockSize;
 307              		.loc 1 161 5 is_stmt 1 discriminator 3 view .LVU58
 308 0018 2146     		mov	r1, r4
 309 001a 3046     		mov	r0, r6
 310 001c FFF7FEFF 		bl	fat32_read
 311              	.LVL24:
 162:Src/usbd_storage_if.c ****     buf8 += blockSize;
 312              		.loc 1 162 5 discriminator 3 view .LVU59
 162:Src/usbd_storage_if.c ****     buf8 += blockSize;
 313              		.loc 1 162 14 is_stmt 0 discriminator 3 view .LVU60
 314 0020 14EB0804 		adds	r4, r4, r8
 315              	.LVL25:
 162:Src/usbd_storage_if.c ****     buf8 += blockSize;
 316              		.loc 1 162 14 discriminator 3 view .LVU61
 317 0024 45F10005 		adc	r5, r5, #0
ARM GAS  /tmp/cc9l5l7w.s 			page 12


 318              	.LVL26:
 163:Src/usbd_storage_if.c ****   }
 319              		.loc 1 163 5 is_stmt 1 discriminator 3 view .LVU62
 163:Src/usbd_storage_if.c ****   }
 320              		.loc 1 163 10 is_stmt 0 discriminator 3 view .LVU63
 321 0028 4644     		add	r6, r6, r8
 322              	.LVL27:
 159:Src/usbd_storage_if.c ****   {
 323              		.loc 1 159 37 is_stmt 1 discriminator 3 view .LVU64
 159:Src/usbd_storage_if.c ****   {
 324              		.loc 1 159 43 is_stmt 0 discriminator 3 view .LVU65
 325 002a 0137     		adds	r7, r7, #1
 326              	.LVL28:
 159:Src/usbd_storage_if.c ****   {
 327              		.loc 1 159 43 discriminator 3 view .LVU66
 328 002c F2E7     		b	.L14
 329              	.L17:
 165:Src/usbd_storage_if.c **** 
 330              		.loc 1 165 1 view .LVU67
 331 002e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 165:Src/usbd_storage_if.c **** 
 332              		.loc 1 165 1 view .LVU68
 333              		.cfi_endproc
 334              	.LFE68:
 336              		.section	.text.STORAGE_Read_FS,"ax",%progbits
 337              		.align	1
 338              		.syntax unified
 339              		.thumb
 340              		.thumb_func
 341              		.fpu softvfp
 343              	STORAGE_Read_FS:
 344              	.LVL29:
 345              	.LFB74:
 256:Src/usbd_storage_if.c ****   /* USER CODE BEGIN 6 */
 346              		.loc 1 256 1 is_stmt 1 view -0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 0
 349              		@ frame_needed = 0, uses_anonymous_args = 0
 256:Src/usbd_storage_if.c ****   /* USER CODE BEGIN 6 */
 350              		.loc 1 256 1 is_stmt 0 view .LVU70
 351 0000 10B5     		push	{r4, lr}
 352              	.LCFI5:
 353              		.cfi_def_cfa_offset 8
 354              		.cfi_offset 4, -8
 355              		.cfi_offset 14, -4
 356 0002 82B0     		sub	sp, sp, #8
 357              	.LCFI6:
 358              		.cfi_def_cfa_offset 16
 258:Src/usbd_storage_if.c ****   return (USBD_OK);
 359              		.loc 1 258 3 is_stmt 1 view .LVU71
 360 0004 0024     		movs	r4, #0
 361 0006 0193     		str	r3, [sp, #4]
 362 0008 4FF40073 		mov	r3, #512
 363              	.LVL30:
 258:Src/usbd_storage_if.c ****   return (USBD_OK);
 364              		.loc 1 258 3 is_stmt 0 view .LVU72
 365 000c 0093     		str	r3, [sp]
ARM GAS  /tmp/cc9l5l7w.s 			page 13


 366 000e 5202     		lsls	r2, r2, #9
 367              	.LVL31:
 258:Src/usbd_storage_if.c ****   return (USBD_OK);
 368              		.loc 1 258 3 view .LVU73
 369 0010 2346     		mov	r3, r4
 370 0012 0846     		mov	r0, r1
 371              	.LVL32:
 258:Src/usbd_storage_if.c ****   return (USBD_OK);
 372              		.loc 1 258 3 view .LVU74
 373 0014 FFF7FEFF 		bl	_STORAGE_ReadBlocks
 374              	.LVL33:
 259:Src/usbd_storage_if.c ****   /* USER CODE END 6 */
 375              		.loc 1 259 3 is_stmt 1 view .LVU75
 261:Src/usbd_storage_if.c **** 
 376              		.loc 1 261 1 is_stmt 0 view .LVU76
 377 0018 2046     		mov	r0, r4
 378 001a 02B0     		add	sp, sp, #8
 379              	.LCFI7:
 380              		.cfi_def_cfa_offset 8
 381              		@ sp needed
 382 001c 10BD     		pop	{r4, pc}
 383              		.cfi_endproc
 384              	.LFE74:
 386              		.global	USBD_Storage_Interface_fops_FS
 387              		.global	STORAGE_Inquirydata_FS
 388              		.section	.data.USBD_Storage_Interface_fops_FS,"aw"
 389              		.align	2
 392              	USBD_Storage_Interface_fops_FS:
 393 0000 00000000 		.word	STORAGE_Init_FS
 394 0004 00000000 		.word	STORAGE_GetCapacity_FS
 395 0008 00000000 		.word	STORAGE_IsReady_FS
 396 000c 00000000 		.word	STORAGE_IsWriteProtected_FS
 397 0010 00000000 		.word	STORAGE_Read_FS
 398 0014 00000000 		.word	STORAGE_Write_FS
 399 0018 00000000 		.word	STORAGE_GetMaxLun_FS
 400 001c 00000000 		.word	STORAGE_Inquirydata_FS
 401              		.section	.rodata.STORAGE_Inquirydata_FS,"a"
 402              		.align	2
 405              	STORAGE_Inquirydata_FS:
 406 0000 00800202 		.ascii	"\000\200\002\002\037\000\000\000STM     Product    "
 406      1F000000 
 406      53544D20 
 406      20202020 
 406      50726F64 
 407 001b 20202020 		.ascii	"     0.01"
 407      20302E30 
 407      31
 408              		.text
 409              	.Letext0:
 410              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 411              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 412              		.file 4 "/usr/include/newlib/sys/_types.h"
 413              		.file 5 "/usr/include/newlib/sys/reent.h"
 414              		.file 6 "/usr/include/newlib/sys/lock.h"
 415              		.file 7 "/usr/include/newlib/sys/_stdint.h"
 416              		.file 8 "/usr/include/newlib/stdlib.h"
 417              		.file 9 "Drivers/CMSIS/Include/core_cm3.h"
ARM GAS  /tmp/cc9l5l7w.s 			page 14


 418              		.file 10 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 419              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 420              		.file 12 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 421              		.file 13 "Middlewares/ST/STM32_USB_Device_Library/Class/MSC/Inc/usbd_msc_scsi.h"
 422              		.file 14 "Middlewares/ST/STM32_USB_Device_Library/Class/MSC/Inc/usbd_msc.h"
 423              		.file 15 "Inc/usbd_storage_if.h"
 424              		.file 16 "Inc/YAB_fat32.h"
ARM GAS  /tmp/cc9l5l7w.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usbd_storage_if.c
     /tmp/cc9l5l7w.s:16     .text.STORAGE_Init_FS:0000000000000000 $t
     /tmp/cc9l5l7w.s:23     .text.STORAGE_Init_FS:0000000000000000 STORAGE_Init_FS
     /tmp/cc9l5l7w.s:42     .text.STORAGE_GetCapacity_FS:0000000000000000 $t
     /tmp/cc9l5l7w.s:48     .text.STORAGE_GetCapacity_FS:0000000000000000 STORAGE_GetCapacity_FS
     /tmp/cc9l5l7w.s:74     .text.STORAGE_IsReady_FS:0000000000000000 $t
     /tmp/cc9l5l7w.s:80     .text.STORAGE_IsReady_FS:0000000000000000 STORAGE_IsReady_FS
     /tmp/cc9l5l7w.s:98     .text.STORAGE_IsWriteProtected_FS:0000000000000000 $t
     /tmp/cc9l5l7w.s:104    .text.STORAGE_IsWriteProtected_FS:0000000000000000 STORAGE_IsWriteProtected_FS
     /tmp/cc9l5l7w.s:122    .text.STORAGE_GetMaxLun_FS:0000000000000000 $t
     /tmp/cc9l5l7w.s:128    .text.STORAGE_GetMaxLun_FS:0000000000000000 STORAGE_GetMaxLun_FS
     /tmp/cc9l5l7w.s:143    .text._STORAGE_WriteBlocks:0000000000000000 $t
     /tmp/cc9l5l7w.s:149    .text._STORAGE_WriteBlocks:0000000000000000 _STORAGE_WriteBlocks
     /tmp/cc9l5l7w.s:215    .text.STORAGE_Write_FS:0000000000000000 $t
     /tmp/cc9l5l7w.s:221    .text.STORAGE_Write_FS:0000000000000000 STORAGE_Write_FS
     /tmp/cc9l5l7w.s:265    .text._STORAGE_ReadBlocks:0000000000000000 $t
     /tmp/cc9l5l7w.s:271    .text._STORAGE_ReadBlocks:0000000000000000 _STORAGE_ReadBlocks
     /tmp/cc9l5l7w.s:337    .text.STORAGE_Read_FS:0000000000000000 $t
     /tmp/cc9l5l7w.s:343    .text.STORAGE_Read_FS:0000000000000000 STORAGE_Read_FS
     /tmp/cc9l5l7w.s:392    .data.USBD_Storage_Interface_fops_FS:0000000000000000 USBD_Storage_Interface_fops_FS
     /tmp/cc9l5l7w.s:405    .rodata.STORAGE_Inquirydata_FS:0000000000000000 STORAGE_Inquirydata_FS
     /tmp/cc9l5l7w.s:389    .data.USBD_Storage_Interface_fops_FS:0000000000000000 $d
     /tmp/cc9l5l7w.s:402    .rodata.STORAGE_Inquirydata_FS:0000000000000000 $d

UNDEFINED SYMBOLS
fat32_write
fat32_read
