ARM GAS  /tmp/ccgfkiBj.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"YAB_fat32.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text._fat32_read_fat_table,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	_fat32_read_fat_table:
  24              	.LVL0:
  25              	.LFB68:
  26              		.file 1 "Src/YAB_fat32.c"
   1:Src/YAB_fat32.c **** /*************************************************************************************
   2:Src/YAB_fat32.c ****   # Released under MIT License
   3:Src/YAB_fat32.c ****   
   4:Src/YAB_fat32.c ****   Copyright (c) 2020 SF Yip (yipxxx@gmail.com)
   5:Src/YAB_fat32.c ****   
   6:Src/YAB_fat32.c ****   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
   7:Src/YAB_fat32.c ****   
   8:Src/YAB_fat32.c ****   The above copyright notice and this permission notice shall be included in all copies or substant
   9:Src/YAB_fat32.c ****   
  10:Src/YAB_fat32.c ****   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
  11:Src/YAB_fat32.c ****   
  12:Src/YAB_fat32.c ****   note: This Source Code modified by RadioOperator 2020-12-06.
  13:Src/YAB_fat32.c **** **************************************************************************************/
  14:Src/YAB_fat32.c **** 
  15:Src/YAB_fat32.c **** #include <stdint.h>
  16:Src/YAB_fat32.c **** #include <string.h>
  17:Src/YAB_fat32.c **** 
  18:Src/YAB_fat32.c **** #ifdef STM32F103xB
  19:Src/YAB_fat32.c ****   #include "stm32f1xx_hal.h"
  20:Src/YAB_fat32.c ****   #include "YAB_F103_config.h"
  21:Src/YAB_fat32.c **** #elif defined STM32F407xx
  22:Src/YAB_fat32.c ****   #include "stm32f4xx_hal.h"
  23:Src/YAB_fat32.c ****   #include "YAB_F407_config.h"
  24:Src/YAB_fat32.c **** #elif defined STM32F723xx
  25:Src/YAB_fat32.c ****   #include "stm32f7xx_hal.h" 
  26:Src/YAB_fat32.c ****   #include "YAB_F723_config.h"
  27:Src/YAB_fat32.c **** #else
  28:Src/YAB_fat32.c ****   #error "!!!!!! MCU not defined !!!!!!"
  29:Src/YAB_fat32.c **** #endif //#ifdef STM32F103xB
  30:Src/YAB_fat32.c **** 
  31:Src/YAB_fat32.c **** #include "YAB_fat32.h"
  32:Src/YAB_fat32.c **** 
ARM GAS  /tmp/ccgfkiBj.s 			page 2


  33:Src/YAB_fat32.c **** //-------------------------------------------------------
  34:Src/YAB_fat32.c **** 
  35:Src/YAB_fat32.c **** #ifndef MIN
  36:Src/YAB_fat32.c ****   #define MIN(a,b) (((a)<(b))?(a):(b))
  37:Src/YAB_fat32.c **** #endif
  38:Src/YAB_fat32.c **** 
  39:Src/YAB_fat32.c **** //-------------------------------------------------------
  40:Src/YAB_fat32.c **** 
  41:Src/YAB_fat32.c **** #define FAT32_SECTOR_SIZE           512
  42:Src/YAB_fat32.c **** 
  43:Src/YAB_fat32.c **** #define FAT32_ATTR_READ_ONLY        0x01
  44:Src/YAB_fat32.c **** #define FAT32_ATTR_HIDDEN           0x02
  45:Src/YAB_fat32.c **** #define FAT32_ATTR_SYSTEM           0x04
  46:Src/YAB_fat32.c **** #define FAT32_ATTR_VOLUME_ID        0x08
  47:Src/YAB_fat32.c **** #define FAT32_ATTR_DIRECTORY        0x10
  48:Src/YAB_fat32.c **** #define FAT32_ATTR_ARCHIVE          0x20
  49:Src/YAB_fat32.c **** #define FAT32_ATTR_LONG_NAME        (FAT32_ATTR_READ_ONLY | FAT32_ATTR_HIDDEN | FAT32_ATTR_SYSTEM |
  50:Src/YAB_fat32.c **** 
  51:Src/YAB_fat32.c **** #define FAT32_MAKE_DATE(dd, mm, yyyy)   (uint16_t)( ( (((yyyy)-1980) & 0x7F)  << 9) | (((mm) & 0x0F
  52:Src/YAB_fat32.c **** #define FAT32_MAKE_TIME(hh,mm)          (uint16_t)(( ((hh) & 0x1F)<< 11) | (((mm) & 0x3F) << 5))
  53:Src/YAB_fat32.c **** 
  54:Src/YAB_fat32.c **** //-------------------------------------------------------
  55:Src/YAB_fat32.c **** 
  56:Src/YAB_fat32.c **** typedef struct 
  57:Src/YAB_fat32.c **** {
  58:Src/YAB_fat32.c ****   uint8_t BS_jmpBoot[3];
  59:Src/YAB_fat32.c ****   uint8_t BS_OEMName[8];
  60:Src/YAB_fat32.c ****   uint16_t BPB_BytsPerSec;
  61:Src/YAB_fat32.c ****   uint8_t BPB_SecPerClus;
  62:Src/YAB_fat32.c ****   uint16_t BPB_RsvdSecCnt;
  63:Src/YAB_fat32.c ****   uint8_t BPB_NumFATs;
  64:Src/YAB_fat32.c ****   uint16_t BPB_RootEntCnt;
  65:Src/YAB_fat32.c ****   uint16_t BPB_TotSec16;
  66:Src/YAB_fat32.c ****   uint8_t BPB_Media;
  67:Src/YAB_fat32.c ****   uint16_t BPB_FATSz16;
  68:Src/YAB_fat32.c ****   uint16_t BPB_SecPerTrk;
  69:Src/YAB_fat32.c ****   uint16_t BPB_NumHeads;
  70:Src/YAB_fat32.c ****   uint32_t BPB_HiddSec;
  71:Src/YAB_fat32.c ****   uint32_t BPB_TotSec32;
  72:Src/YAB_fat32.c ****   
  73:Src/YAB_fat32.c ****   // FAT32 Structure
  74:Src/YAB_fat32.c ****   uint32_t BPB_FATSz32;
  75:Src/YAB_fat32.c ****   uint16_t BPB_ExtFlags;
  76:Src/YAB_fat32.c ****   uint16_t BPB_FSVer;
  77:Src/YAB_fat32.c ****   uint32_t BPB_RootClus;
  78:Src/YAB_fat32.c ****   uint16_t BPB_FSInfo;
  79:Src/YAB_fat32.c ****   uint16_t BPB_BkBootSec;
  80:Src/YAB_fat32.c ****   uint8_t BS_Reserved[12];
  81:Src/YAB_fat32.c ****   uint8_t BS_DrvNum;
  82:Src/YAB_fat32.c ****   uint8_t BS_Reserved1;
  83:Src/YAB_fat32.c ****   uint8_t BS_BootSig;
  84:Src/YAB_fat32.c ****   uint32_t BS_VolID;
  85:Src/YAB_fat32.c ****   uint8_t BS_VolLab[11];
  86:Src/YAB_fat32.c ****   uint8_t BS_FilSysType[8];
  87:Src/YAB_fat32.c **** } __attribute__((packed)) fat32_bpb_t;
  88:Src/YAB_fat32.c **** 
  89:Src/YAB_fat32.c **** typedef struct 
ARM GAS  /tmp/ccgfkiBj.s 			page 3


  90:Src/YAB_fat32.c **** {
  91:Src/YAB_fat32.c ****   uint32_t FSI_LeadSig;
  92:Src/YAB_fat32.c ****   uint8_t FSI_Reserved1[480];
  93:Src/YAB_fat32.c ****   uint32_t FSI_StrucSig;
  94:Src/YAB_fat32.c ****   uint32_t FSI_Free_Count;
  95:Src/YAB_fat32.c ****   uint32_t FSI_Nxt_Free;
  96:Src/YAB_fat32.c ****   uint8_t FSI_Reserved2[12];
  97:Src/YAB_fat32.c ****   uint32_t FSI_TrailSig;
  98:Src/YAB_fat32.c **** } __attribute__((packed)) fat32_fsinfo_t;
  99:Src/YAB_fat32.c **** 
 100:Src/YAB_fat32.c **** typedef struct 
 101:Src/YAB_fat32.c **** {
 102:Src/YAB_fat32.c ****   uint8_t DIR_Name[11];
 103:Src/YAB_fat32.c ****   uint8_t DIR_Attr;
 104:Src/YAB_fat32.c ****   uint8_t DIR_NTRes;
 105:Src/YAB_fat32.c ****   uint8_t DIR_CrtTimeTenth;
 106:Src/YAB_fat32.c ****   
 107:Src/YAB_fat32.c ****   uint16_t DIR_CrtTime;
 108:Src/YAB_fat32.c ****   uint16_t DIR_CrtDate;
 109:Src/YAB_fat32.c ****   uint16_t DIR_LstAccDate;
 110:Src/YAB_fat32.c ****   uint16_t DIR_FstClusHI;
 111:Src/YAB_fat32.c ****   uint16_t DIR_WrtTime;
 112:Src/YAB_fat32.c ****   uint16_t DIR_WrtDate;
 113:Src/YAB_fat32.c ****   uint16_t DIR_FstClusLO;
 114:Src/YAB_fat32.c ****   uint32_t DIR_FileSize;
 115:Src/YAB_fat32.c **** } __attribute__((packed)) fat32_dir_entry_t;
 116:Src/YAB_fat32.c **** 
 117:Src/YAB_fat32.c **** //-------------------------------------------------------
 118:Src/YAB_fat32.c **** 
 119:Src/YAB_fat32.c **** typedef struct
 120:Src/YAB_fat32.c **** {
 121:Src/YAB_fat32.c ****   uint32_t begin;
 122:Src/YAB_fat32.c ****   uint32_t end;
 123:Src/YAB_fat32.c **** }fat32_range_t;
 124:Src/YAB_fat32.c **** 
 125:Src/YAB_fat32.c **** #define FAT32_DIR_ENTRY_ADDR         0x00400000
 126:Src/YAB_fat32.c **** 
 127:Src/YAB_fat32.c **** static fat32_range_t fw_addr_range = {0x00400600, (0x00400600 + APP_SIZE)};
 128:Src/YAB_fat32.c **** 
 129:Src/YAB_fat32.c **** //-------------------------------------------------------
 130:Src/YAB_fat32.c **** 
 131:Src/YAB_fat32.c **** #define FAT32_MBR_HARDCODE  1u
 132:Src/YAB_fat32.c **** 
 133:Src/YAB_fat32.c **** #if (FAT32_MBR_HARDCODE > 0u)
 134:Src/YAB_fat32.c ****   static const uint8_t FAT32_MBR_DATA0[] = {
 135:Src/YAB_fat32.c ****     0xEB, 0xFE, 0x90, 0x4D, 0x53, 0x44, 0x4F, 0x53, 0x35, 0x2E, 0x30, 0x00, 0x02, 0x01, 0x7C, 0x11,
 136:Src/YAB_fat32.c ****     0x02, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x3F, 0x00, 0xFF, 0x00, 0x3F, 0x00, 0x00, 0x00,
 137:Src/YAB_fat32.c ****     0xC1, 0xC0, 0x03, 0x00, 0x42, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
 138:Src/YAB_fat32.c ****     0x01, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 139:Src/YAB_fat32.c ****     0x80, 0x00, 0x29, 0xB0, 0x49, 0x90, 0x02, 0x4E, 0x4F, 0x20, 0x4E, 0x41, 0x4D, 0x45, 0x20, 0x20,
 140:Src/YAB_fat32.c ****     0x20, 0x20, 0x46, 0x41, 0x54, 0x33, 0x32, 0x20, 0x20, 0x20};
 141:Src/YAB_fat32.c **** #endif
 142:Src/YAB_fat32.c **** 
 143:Src/YAB_fat32.c **** // Addr: 0x0000 and 0x0C00
 144:Src/YAB_fat32.c **** static void _fat32_read_bpb(uint8_t *b)
 145:Src/YAB_fat32.c **** {
 146:Src/YAB_fat32.c ****   #if (FAT32_MBR_HARDCODE > 0u)
ARM GAS  /tmp/ccgfkiBj.s 			page 4


 147:Src/YAB_fat32.c ****     memcpy(b, FAT32_MBR_DATA0, sizeof(FAT32_MBR_DATA0));
 148:Src/YAB_fat32.c ****     memset(b + sizeof(FAT32_MBR_DATA0), 0x00, FAT32_SECTOR_SIZE - sizeof(FAT32_MBR_DATA0) - 2);
 149:Src/YAB_fat32.c ****     b[510] = 0x55;
 150:Src/YAB_fat32.c ****     b[511] = 0xAA;
 151:Src/YAB_fat32.c ****     #else
 152:Src/YAB_fat32.c ****     fat32_bpb_t *bpb = (fat32_bpb_t*)b;
 153:Src/YAB_fat32.c ****     memset(b, 0, FAT32_SECTOR_SIZE);
 154:Src/YAB_fat32.c ****     
 155:Src/YAB_fat32.c ****     bpb->BS_jmpBoot[0] = 0xEB; bpb->BS_jmpBoot[1] = 0xFE; bpb->BS_jmpBoot[2] = 0x90;
 156:Src/YAB_fat32.c ****     memcpy(bpb->BS_OEMName, "MSDOS5.0", 8);
 157:Src/YAB_fat32.c ****     bpb->BPB_BytsPerSec = 512;  // 00 02
 158:Src/YAB_fat32.c ****     bpb->BPB_SecPerClus = 1;
 159:Src/YAB_fat32.c ****     bpb->BPB_RsvdSecCnt = 0x117C;   //2238KB
 160:Src/YAB_fat32.c ****     bpb->BPB_NumFATs = 2;
 161:Src/YAB_fat32.c ****     //bpb->BPB_RootEntCnt = 0x0000;
 162:Src/YAB_fat32.c ****     //bpb->BPB_TotSec16 = 0x0000;
 163:Src/YAB_fat32.c ****     bpb->BPB_Media = 0xF8;
 164:Src/YAB_fat32.c ****     //bpb->BPB_FATSz16 = 0x0000;
 165:Src/YAB_fat32.c ****     bpb->BPB_SecPerTrk = 0x003F;
 166:Src/YAB_fat32.c ****     bpb->BPB_NumHeads = 0x00FF;
 167:Src/YAB_fat32.c ****     bpb->BPB_HiddSec = 0x0000003F;
 168:Src/YAB_fat32.c ****     bpb->BPB_TotSec32 = 0x0003C0C1;     //120MB
 169:Src/YAB_fat32.c ****     
 170:Src/YAB_fat32.c ****     // FAT32 Structure
 171:Src/YAB_fat32.c ****     bpb->BPB_FATSz32 = 0x00000742;
 172:Src/YAB_fat32.c ****     bpb->BPB_ExtFlags = 0x0000;
 173:Src/YAB_fat32.c ****     bpb->BPB_FSVer = 0x0000;
 174:Src/YAB_fat32.c ****     bpb->BPB_RootClus = 0x00000002;
 175:Src/YAB_fat32.c ****     bpb->BPB_FSInfo = 0x0001;
 176:Src/YAB_fat32.c ****     bpb->BPB_BkBootSec = 0x0006;
 177:Src/YAB_fat32.c ****     //bpb->BS_Reserved[12];
 178:Src/YAB_fat32.c ****     bpb->BS_DrvNum = 0x80;
 179:Src/YAB_fat32.c ****     //bpb->BS_Reserved1;
 180:Src/YAB_fat32.c ****     bpb->BS_BootSig = 0x29;
 181:Src/YAB_fat32.c ****     bpb->BS_VolID = 0x94B11E23;
 182:Src/YAB_fat32.c ****     memcpy(bpb->BS_VolLab, "NO NAME    ", 11);
 183:Src/YAB_fat32.c ****     memcpy(bpb->BS_FilSysType, "FAT32   ", 8);
 184:Src/YAB_fat32.c ****     
 185:Src/YAB_fat32.c ****     b[510] = 0x55;
 186:Src/YAB_fat32.c ****     b[511] = 0xAA;
 187:Src/YAB_fat32.c ****   #endif
 188:Src/YAB_fat32.c **** }
 189:Src/YAB_fat32.c **** 
 190:Src/YAB_fat32.c **** // Addr: 0x0000_0200 and 0x0000_0E00
 191:Src/YAB_fat32.c **** static void _fat32_read_fsinfo(uint8_t *b)
 192:Src/YAB_fat32.c **** {
 193:Src/YAB_fat32.c ****   fat32_fsinfo_t *fsinfo = (fat32_fsinfo_t*)b;
 194:Src/YAB_fat32.c ****   memset(b, 0, FAT32_SECTOR_SIZE);
 195:Src/YAB_fat32.c ****   fsinfo->FSI_LeadSig = 0x41615252;
 196:Src/YAB_fat32.c ****   fsinfo->FSI_StrucSig = 0x61417272;
 197:Src/YAB_fat32.c ****   fsinfo->FSI_Free_Count = 0x000398BE; //0xFFFFFFFF;
 198:Src/YAB_fat32.c ****   fsinfo->FSI_Nxt_Free = 0x00000805;
 199:Src/YAB_fat32.c ****   b[510] = 0x55;
 200:Src/YAB_fat32.c ****   b[511] = 0xAA;
 201:Src/YAB_fat32.c **** }
 202:Src/YAB_fat32.c **** 
 203:Src/YAB_fat32.c **** // Addr: 0x0000_0400 and 0x0000_1000
ARM GAS  /tmp/ccgfkiBj.s 			page 5


 204:Src/YAB_fat32.c **** static void _fat32_read_fsinfo2(uint8_t *b)
 205:Src/YAB_fat32.c **** {
 206:Src/YAB_fat32.c ****   memset(b, 0, FAT32_SECTOR_SIZE);
 207:Src/YAB_fat32.c ****   b[510] = 0x55;
 208:Src/YAB_fat32.c ****   b[511] = 0xAA;
 209:Src/YAB_fat32.c **** }
 210:Src/YAB_fat32.c **** 
 211:Src/YAB_fat32.c **** // Addr: 0x0000_1800
 212:Src/YAB_fat32.c **** // An operating system is missing.... BS_jmpBoot[1] = 0xFE (jmp $)
 213:Src/YAB_fat32.c **** // No need to gen bootcode
 214:Src/YAB_fat32.c **** 
 215:Src/YAB_fat32.c **** // FAT32 table
 216:Src/YAB_fat32.c **** // Addr: 0x0022_F800 - 0x0023_1814
 217:Src/YAB_fat32.c **** // Addr: 0x0031_7C00 - 0x0031_9C14
 218:Src/YAB_fat32.c **** static void _fat32_read_fat_table(uint8_t *b, uint32_t addr)
 219:Src/YAB_fat32.c **** {
  27              		.loc 1 219 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              		.loc 1 219 1 is_stmt 0 view .LVU1
  33 0000 10B4     		push	{r4}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 4, -4
 220:Src/YAB_fat32.c ****   uint32_t s_offset = (addr - 0x22F800) >> 2;
  37              		.loc 1 220 3 is_stmt 1 view .LVU2
  38              		.loc 1 220 29 is_stmt 0 view .LVU3
  39 0002 A1F50B14 		sub	r4, r1, #2277376
  40 0006 A4F56054 		sub	r4, r4, #14336
  41              		.loc 1 220 12 view .LVU4
  42 000a A408     		lsrs	r4, r4, #2
  43              	.LVL1:
 221:Src/YAB_fat32.c ****   uint32_t *b32 = (uint32_t*)b;
  44              		.loc 1 221 3 is_stmt 1 view .LVU5
 222:Src/YAB_fat32.c ****   uint32_t i;
  45              		.loc 1 222 3 view .LVU6
 223:Src/YAB_fat32.c ****   
 224:Src/YAB_fat32.c ****   if(addr == 0x22F800)    // FAT table start
  46              		.loc 1 224 3 view .LVU7
  47              		.loc 1 224 5 is_stmt 0 view .LVU8
  48 000c 1B4B     		ldr	r3, .L15
  49 000e 9942     		cmp	r1, r3
  50 0010 0BD0     		beq	.L14
 225:Src/YAB_fat32.c ****   {
 226:Src/YAB_fat32.c ****     // 1MB
 227:Src/YAB_fat32.c ****     b32[0] = 0x0FFFFFF8;
 228:Src/YAB_fat32.c ****     b32[1] = 0xFFFFFFFF;
 229:Src/YAB_fat32.c ****     b32[2] = 0x0FFFFFFF;
 230:Src/YAB_fat32.c ****     b32[3] = 0x0FFFFFFF;
 231:Src/YAB_fat32.c ****     b32[4] = 0x0FFFFFFF;
 232:Src/YAB_fat32.c ****     
 233:Src/YAB_fat32.c ****     for(i=5; i<128; i++)
 234:Src/YAB_fat32.c ****     {
 235:Src/YAB_fat32.c ****       b32[i] = s_offset + i +1;
 236:Src/YAB_fat32.c ****     }
ARM GAS  /tmp/ccgfkiBj.s 			page 6


 237:Src/YAB_fat32.c ****   }
 238:Src/YAB_fat32.c ****   else if(addr == 0x231800)    // FAT table end
  51              		.loc 1 238 8 is_stmt 1 view .LVU9
  52              		.loc 1 238 10 is_stmt 0 view .LVU10
  53 0012 1B4B     		ldr	r3, .L15+4
  54 0014 9942     		cmp	r1, r3
  55 0016 2DD0     		beq	.L12
 239:Src/YAB_fat32.c ****   {
 240:Src/YAB_fat32.c ****     for(i=0; i<4; i++)
 241:Src/YAB_fat32.c ****     {
 242:Src/YAB_fat32.c ****       b32[i] = s_offset + i +1;
 243:Src/YAB_fat32.c ****     }
 244:Src/YAB_fat32.c ****     b32[4] = 0x0FFFFFFF;
 245:Src/YAB_fat32.c ****     for(i=5; i<128; i++)
 246:Src/YAB_fat32.c ****     {
 247:Src/YAB_fat32.c ****       b32[i] = 0x00000000;
 248:Src/YAB_fat32.c ****     }
 249:Src/YAB_fat32.c ****   }
 250:Src/YAB_fat32.c ****   else
 251:Src/YAB_fat32.c ****   {
 252:Src/YAB_fat32.c ****     for(i=0; i<128; i++)
  56              		.loc 1 252 10 view .LVU11
  57 0018 0023     		movs	r3, #0
  58              	.L7:
  59              	.LVL2:
  60              		.loc 1 252 14 is_stmt 1 discriminator 1 view .LVU12
  61              		.loc 1 252 5 is_stmt 0 discriminator 1 view .LVU13
  62 001a 7F2B     		cmp	r3, #127
  63 001c 2CD8     		bhi	.L1
 253:Src/YAB_fat32.c ****     {
 254:Src/YAB_fat32.c ****       b32[i] = s_offset + i +1;
  64              		.loc 1 254 7 is_stmt 1 discriminator 3 view .LVU14
  65              		.loc 1 254 25 is_stmt 0 discriminator 3 view .LVU15
  66 001e 1A19     		adds	r2, r3, r4
  67              		.loc 1 254 29 discriminator 3 view .LVU16
  68 0020 0132     		adds	r2, r2, #1
  69              		.loc 1 254 14 discriminator 3 view .LVU17
  70 0022 40F82320 		str	r2, [r0, r3, lsl #2]
 252:Src/YAB_fat32.c ****     {
  71              		.loc 1 252 21 is_stmt 1 discriminator 3 view .LVU18
 252:Src/YAB_fat32.c ****     {
  72              		.loc 1 252 22 is_stmt 0 discriminator 3 view .LVU19
  73 0026 0133     		adds	r3, r3, #1
  74              	.LVL3:
 252:Src/YAB_fat32.c ****     {
  75              		.loc 1 252 22 discriminator 3 view .LVU20
  76 0028 F7E7     		b	.L7
  77              	.LVL4:
  78              	.L14:
 227:Src/YAB_fat32.c ****     b32[1] = 0xFFFFFFFF;
  79              		.loc 1 227 5 is_stmt 1 view .LVU21
 227:Src/YAB_fat32.c ****     b32[1] = 0xFFFFFFFF;
  80              		.loc 1 227 12 is_stmt 0 view .LVU22
  81 002a 164B     		ldr	r3, .L15+8
  82 002c 0360     		str	r3, [r0]
 228:Src/YAB_fat32.c ****     b32[2] = 0x0FFFFFFF;
  83              		.loc 1 228 5 is_stmt 1 view .LVU23
ARM GAS  /tmp/ccgfkiBj.s 			page 7


 228:Src/YAB_fat32.c ****     b32[2] = 0x0FFFFFFF;
  84              		.loc 1 228 12 is_stmt 0 view .LVU24
  85 002e 4FF0FF33 		mov	r3, #-1
  86 0032 4360     		str	r3, [r0, #4]
 229:Src/YAB_fat32.c ****     b32[3] = 0x0FFFFFFF;
  87              		.loc 1 229 5 is_stmt 1 view .LVU25
 229:Src/YAB_fat32.c ****     b32[3] = 0x0FFFFFFF;
  88              		.loc 1 229 12 is_stmt 0 view .LVU26
  89 0034 6FF07043 		mvn	r3, #-268435456
  90 0038 8360     		str	r3, [r0, #8]
 230:Src/YAB_fat32.c ****     b32[4] = 0x0FFFFFFF;
  91              		.loc 1 230 5 is_stmt 1 view .LVU27
 230:Src/YAB_fat32.c ****     b32[4] = 0x0FFFFFFF;
  92              		.loc 1 230 12 is_stmt 0 view .LVU28
  93 003a C360     		str	r3, [r0, #12]
 231:Src/YAB_fat32.c ****     
  94              		.loc 1 231 5 is_stmt 1 view .LVU29
 231:Src/YAB_fat32.c ****     
  95              		.loc 1 231 12 is_stmt 0 view .LVU30
  96 003c 0361     		str	r3, [r0, #16]
 233:Src/YAB_fat32.c ****     {
  97              		.loc 1 233 5 is_stmt 1 view .LVU31
  98              	.LVL5:
 233:Src/YAB_fat32.c ****     {
  99              		.loc 1 233 10 is_stmt 0 view .LVU32
 100 003e 0523     		movs	r3, #5
 101              	.LVL6:
 102              	.L3:
 233:Src/YAB_fat32.c ****     {
 103              		.loc 1 233 14 is_stmt 1 discriminator 1 view .LVU33
 233:Src/YAB_fat32.c ****     {
 104              		.loc 1 233 5 is_stmt 0 discriminator 1 view .LVU34
 105 0040 7F2B     		cmp	r3, #127
 106 0042 19D8     		bhi	.L1
 235:Src/YAB_fat32.c ****     }
 107              		.loc 1 235 7 is_stmt 1 discriminator 3 view .LVU35
 235:Src/YAB_fat32.c ****     }
 108              		.loc 1 235 25 is_stmt 0 discriminator 3 view .LVU36
 109 0044 1A19     		adds	r2, r3, r4
 235:Src/YAB_fat32.c ****     }
 110              		.loc 1 235 29 discriminator 3 view .LVU37
 111 0046 0132     		adds	r2, r2, #1
 235:Src/YAB_fat32.c ****     }
 112              		.loc 1 235 14 discriminator 3 view .LVU38
 113 0048 40F82320 		str	r2, [r0, r3, lsl #2]
 233:Src/YAB_fat32.c ****     {
 114              		.loc 1 233 21 is_stmt 1 discriminator 3 view .LVU39
 233:Src/YAB_fat32.c ****     {
 115              		.loc 1 233 22 is_stmt 0 discriminator 3 view .LVU40
 116 004c 0133     		adds	r3, r3, #1
 117              	.LVL7:
 233:Src/YAB_fat32.c ****     {
 118              		.loc 1 233 22 discriminator 3 view .LVU41
 119 004e F7E7     		b	.L3
 120              	.L8:
 242:Src/YAB_fat32.c ****     }
 121              		.loc 1 242 7 is_stmt 1 discriminator 3 view .LVU42
ARM GAS  /tmp/ccgfkiBj.s 			page 8


 242:Src/YAB_fat32.c ****     }
 122              		.loc 1 242 25 is_stmt 0 discriminator 3 view .LVU43
 123 0050 1A19     		adds	r2, r3, r4
 242:Src/YAB_fat32.c ****     }
 124              		.loc 1 242 29 discriminator 3 view .LVU44
 125 0052 0132     		adds	r2, r2, #1
 242:Src/YAB_fat32.c ****     }
 126              		.loc 1 242 14 discriminator 3 view .LVU45
 127 0054 40F82320 		str	r2, [r0, r3, lsl #2]
 240:Src/YAB_fat32.c ****     {
 128              		.loc 1 240 19 is_stmt 1 discriminator 3 view .LVU46
 240:Src/YAB_fat32.c ****     {
 129              		.loc 1 240 20 is_stmt 0 discriminator 3 view .LVU47
 130 0058 0133     		adds	r3, r3, #1
 131              	.LVL8:
 132              	.L6:
 240:Src/YAB_fat32.c ****     {
 133              		.loc 1 240 14 is_stmt 1 discriminator 1 view .LVU48
 240:Src/YAB_fat32.c ****     {
 134              		.loc 1 240 5 is_stmt 0 discriminator 1 view .LVU49
 135 005a 032B     		cmp	r3, #3
 136 005c F8D9     		bls	.L8
 244:Src/YAB_fat32.c ****     for(i=5; i<128; i++)
 137              		.loc 1 244 5 is_stmt 1 view .LVU50
 244:Src/YAB_fat32.c ****     for(i=5; i<128; i++)
 138              		.loc 1 244 12 is_stmt 0 view .LVU51
 139 005e 6FF07043 		mvn	r3, #-268435456
 140              	.LVL9:
 244:Src/YAB_fat32.c ****     for(i=5; i<128; i++)
 141              		.loc 1 244 12 view .LVU52
 142 0062 0361     		str	r3, [r0, #16]
 245:Src/YAB_fat32.c ****     {
 143              		.loc 1 245 5 is_stmt 1 view .LVU53
 144              	.LVL10:
 245:Src/YAB_fat32.c ****     {
 145              		.loc 1 245 10 is_stmt 0 view .LVU54
 146 0064 0523     		movs	r3, #5
 147              	.LVL11:
 148              	.L9:
 245:Src/YAB_fat32.c ****     {
 149              		.loc 1 245 14 is_stmt 1 discriminator 1 view .LVU55
 245:Src/YAB_fat32.c ****     {
 150              		.loc 1 245 5 is_stmt 0 discriminator 1 view .LVU56
 151 0066 7F2B     		cmp	r3, #127
 152 0068 06D8     		bhi	.L1
 247:Src/YAB_fat32.c ****     }
 153              		.loc 1 247 7 is_stmt 1 discriminator 3 view .LVU57
 247:Src/YAB_fat32.c ****     }
 154              		.loc 1 247 14 is_stmt 0 discriminator 3 view .LVU58
 155 006a 0022     		movs	r2, #0
 156 006c 40F82320 		str	r2, [r0, r3, lsl #2]
 245:Src/YAB_fat32.c ****     {
 157              		.loc 1 245 21 is_stmt 1 discriminator 3 view .LVU59
 245:Src/YAB_fat32.c ****     {
 158              		.loc 1 245 22 is_stmt 0 discriminator 3 view .LVU60
 159 0070 0133     		adds	r3, r3, #1
 160              	.LVL12:
ARM GAS  /tmp/ccgfkiBj.s 			page 9


 245:Src/YAB_fat32.c ****     {
 161              		.loc 1 245 22 discriminator 3 view .LVU61
 162 0072 F8E7     		b	.L9
 163              	.LVL13:
 164              	.L12:
 240:Src/YAB_fat32.c ****     {
 165              		.loc 1 240 10 view .LVU62
 166 0074 0023     		movs	r3, #0
 167 0076 F0E7     		b	.L6
 168              	.LVL14:
 169              	.L1:
 255:Src/YAB_fat32.c ****     }
 256:Src/YAB_fat32.c ****   }
 257:Src/YAB_fat32.c **** }
 170              		.loc 1 257 1 view .LVU63
 171 0078 10BC     		pop	{r4}
 172              	.LCFI1:
 173              		.cfi_restore 4
 174              		.cfi_def_cfa_offset 0
 175              	.LVL15:
 176              		.loc 1 257 1 view .LVU64
 177 007a 7047     		bx	lr
 178              	.L16:
 179              		.align	2
 180              	.L15:
 181 007c 00F82200 		.word	2291712
 182 0080 00182300 		.word	2299904
 183 0084 F8FFFF0F 		.word	268435448
 184              		.cfi_endproc
 185              	.LFE68:
 187              		.section	.text._fat32_read_bpb,"ax",%progbits
 188              		.align	1
 189              		.syntax unified
 190              		.thumb
 191              		.thumb_func
 192              		.fpu softvfp
 194              	_fat32_read_bpb:
 195              	.LVL16:
 196              	.LFB65:
 145:Src/YAB_fat32.c ****   #if (FAT32_MBR_HARDCODE > 0u)
 197              		.loc 1 145 1 is_stmt 1 view -0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 145:Src/YAB_fat32.c ****   #if (FAT32_MBR_HARDCODE > 0u)
 201              		.loc 1 145 1 is_stmt 0 view .LVU66
 202 0000 10B5     		push	{r4, lr}
 203              	.LCFI2:
 204              		.cfi_def_cfa_offset 8
 205              		.cfi_offset 4, -8
 206              		.cfi_offset 14, -4
 207 0002 0446     		mov	r4, r0
 147:Src/YAB_fat32.c ****     memset(b + sizeof(FAT32_MBR_DATA0), 0x00, FAT32_SECTOR_SIZE - sizeof(FAT32_MBR_DATA0) - 2);
 208              		.loc 1 147 5 is_stmt 1 view .LVU67
 209 0004 5A22     		movs	r2, #90
 210 0006 0849     		ldr	r1, .L19
 211 0008 FFF7FEFF 		bl	memcpy
ARM GAS  /tmp/ccgfkiBj.s 			page 10


 212              	.LVL17:
 148:Src/YAB_fat32.c ****     b[510] = 0x55;
 213              		.loc 1 148 5 view .LVU68
 214 000c 4FF4D272 		mov	r2, #420
 215 0010 0021     		movs	r1, #0
 216 0012 04F15A00 		add	r0, r4, #90
 217 0016 FFF7FEFF 		bl	memset
 218              	.LVL18:
 149:Src/YAB_fat32.c ****     b[511] = 0xAA;
 219              		.loc 1 149 5 view .LVU69
 149:Src/YAB_fat32.c ****     b[511] = 0xAA;
 220              		.loc 1 149 12 is_stmt 0 view .LVU70
 221 001a 5523     		movs	r3, #85
 222 001c 84F8FE31 		strb	r3, [r4, #510]
 150:Src/YAB_fat32.c ****     #else
 223              		.loc 1 150 5 is_stmt 1 view .LVU71
 150:Src/YAB_fat32.c ****     #else
 224              		.loc 1 150 12 is_stmt 0 view .LVU72
 225 0020 AA23     		movs	r3, #170
 226 0022 84F8FF31 		strb	r3, [r4, #511]
 188:Src/YAB_fat32.c **** 
 227              		.loc 1 188 1 view .LVU73
 228 0026 10BD     		pop	{r4, pc}
 229              	.LVL19:
 230              	.L20:
 188:Src/YAB_fat32.c **** 
 231              		.loc 1 188 1 view .LVU74
 232              		.align	2
 233              	.L19:
 234 0028 00000000 		.word	.LANCHOR0
 235              		.cfi_endproc
 236              	.LFE65:
 238              		.section	.text._fat32_read_fsinfo,"ax",%progbits
 239              		.align	1
 240              		.syntax unified
 241              		.thumb
 242              		.thumb_func
 243              		.fpu softvfp
 245              	_fat32_read_fsinfo:
 246              	.LVL20:
 247              	.LFB66:
 192:Src/YAB_fat32.c ****   fat32_fsinfo_t *fsinfo = (fat32_fsinfo_t*)b;
 248              		.loc 1 192 1 is_stmt 1 view -0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 0
 251              		@ frame_needed = 0, uses_anonymous_args = 0
 192:Src/YAB_fat32.c ****   fat32_fsinfo_t *fsinfo = (fat32_fsinfo_t*)b;
 252              		.loc 1 192 1 is_stmt 0 view .LVU76
 253 0000 10B5     		push	{r4, lr}
 254              	.LCFI3:
 255              		.cfi_def_cfa_offset 8
 256              		.cfi_offset 4, -8
 257              		.cfi_offset 14, -4
 258 0002 0446     		mov	r4, r0
 193:Src/YAB_fat32.c ****   memset(b, 0, FAT32_SECTOR_SIZE);
 259              		.loc 1 193 3 is_stmt 1 view .LVU77
 260              	.LVL21:
ARM GAS  /tmp/ccgfkiBj.s 			page 11


 194:Src/YAB_fat32.c ****   fsinfo->FSI_LeadSig = 0x41615252;
 261              		.loc 1 194 3 view .LVU78
 262 0004 4FF40072 		mov	r2, #512
 263 0008 0021     		movs	r1, #0
 264 000a FFF7FEFF 		bl	memset
 265              	.LVL22:
 195:Src/YAB_fat32.c ****   fsinfo->FSI_StrucSig = 0x61417272;
 266              		.loc 1 195 3 view .LVU79
 195:Src/YAB_fat32.c ****   fsinfo->FSI_StrucSig = 0x61417272;
 267              		.loc 1 195 23 is_stmt 0 view .LVU80
 268 000e 0023     		movs	r3, #0
 269 0010 5222     		movs	r2, #82
 270 0012 2270     		strb	r2, [r4]
 271 0014 6270     		strb	r2, [r4, #1]
 272 0016 6122     		movs	r2, #97
 273 0018 A270     		strb	r2, [r4, #2]
 274 001a 4121     		movs	r1, #65
 275 001c E170     		strb	r1, [r4, #3]
 196:Src/YAB_fat32.c ****   fsinfo->FSI_Free_Count = 0x000398BE; //0xFFFFFFFF;
 276              		.loc 1 196 3 is_stmt 1 view .LVU81
 196:Src/YAB_fat32.c ****   fsinfo->FSI_Free_Count = 0x000398BE; //0xFFFFFFFF;
 277              		.loc 1 196 24 is_stmt 0 view .LVU82
 278 001e 7220     		movs	r0, #114
 279 0020 84F8E401 		strb	r0, [r4, #484]
 280 0024 84F8E501 		strb	r0, [r4, #485]
 281 0028 84F8E611 		strb	r1, [r4, #486]
 282 002c 84F8E721 		strb	r2, [r4, #487]
 197:Src/YAB_fat32.c ****   fsinfo->FSI_Nxt_Free = 0x00000805;
 283              		.loc 1 197 3 is_stmt 1 view .LVU83
 197:Src/YAB_fat32.c ****   fsinfo->FSI_Nxt_Free = 0x00000805;
 284              		.loc 1 197 26 is_stmt 0 view .LVU84
 285 0030 6FF04102 		mvn	r2, #65
 286 0034 84F8E821 		strb	r2, [r4, #488]
 287 0038 6FF06702 		mvn	r2, #103
 288 003c 84F8E921 		strb	r2, [r4, #489]
 289 0040 0322     		movs	r2, #3
 290 0042 84F8EA21 		strb	r2, [r4, #490]
 291 0046 84F8EB31 		strb	r3, [r4, #491]
 198:Src/YAB_fat32.c ****   b[510] = 0x55;
 292              		.loc 1 198 3 is_stmt 1 view .LVU85
 198:Src/YAB_fat32.c ****   b[510] = 0x55;
 293              		.loc 1 198 24 is_stmt 0 view .LVU86
 294 004a 0522     		movs	r2, #5
 295 004c 84F8EC21 		strb	r2, [r4, #492]
 296 0050 0822     		movs	r2, #8
 297 0052 84F8ED21 		strb	r2, [r4, #493]
 298 0056 84F8EE31 		strb	r3, [r4, #494]
 299 005a 84F8EF31 		strb	r3, [r4, #495]
 199:Src/YAB_fat32.c ****   b[511] = 0xAA;
 300              		.loc 1 199 3 is_stmt 1 view .LVU87
 199:Src/YAB_fat32.c ****   b[511] = 0xAA;
 301              		.loc 1 199 10 is_stmt 0 view .LVU88
 302 005e 5523     		movs	r3, #85
 303 0060 84F8FE31 		strb	r3, [r4, #510]
 200:Src/YAB_fat32.c **** }
 304              		.loc 1 200 3 is_stmt 1 view .LVU89
 200:Src/YAB_fat32.c **** }
ARM GAS  /tmp/ccgfkiBj.s 			page 12


 305              		.loc 1 200 10 is_stmt 0 view .LVU90
 306 0064 AA23     		movs	r3, #170
 307 0066 84F8FF31 		strb	r3, [r4, #511]
 201:Src/YAB_fat32.c **** 
 308              		.loc 1 201 1 view .LVU91
 309 006a 10BD     		pop	{r4, pc}
 201:Src/YAB_fat32.c **** 
 310              		.loc 1 201 1 view .LVU92
 311              		.cfi_endproc
 312              	.LFE66:
 314              		.section	.text._fat32_read_fsinfo2,"ax",%progbits
 315              		.align	1
 316              		.syntax unified
 317              		.thumb
 318              		.thumb_func
 319              		.fpu softvfp
 321              	_fat32_read_fsinfo2:
 322              	.LVL23:
 323              	.LFB67:
 205:Src/YAB_fat32.c ****   memset(b, 0, FAT32_SECTOR_SIZE);
 324              		.loc 1 205 1 is_stmt 1 view -0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 0
 327              		@ frame_needed = 0, uses_anonymous_args = 0
 205:Src/YAB_fat32.c ****   memset(b, 0, FAT32_SECTOR_SIZE);
 328              		.loc 1 205 1 is_stmt 0 view .LVU94
 329 0000 10B5     		push	{r4, lr}
 330              	.LCFI4:
 331              		.cfi_def_cfa_offset 8
 332              		.cfi_offset 4, -8
 333              		.cfi_offset 14, -4
 334 0002 0446     		mov	r4, r0
 206:Src/YAB_fat32.c ****   b[510] = 0x55;
 335              		.loc 1 206 3 is_stmt 1 view .LVU95
 336 0004 4FF40072 		mov	r2, #512
 337 0008 0021     		movs	r1, #0
 338 000a FFF7FEFF 		bl	memset
 339              	.LVL24:
 207:Src/YAB_fat32.c ****   b[511] = 0xAA;
 340              		.loc 1 207 3 view .LVU96
 207:Src/YAB_fat32.c ****   b[511] = 0xAA;
 341              		.loc 1 207 10 is_stmt 0 view .LVU97
 342 000e 5523     		movs	r3, #85
 343 0010 84F8FE31 		strb	r3, [r4, #510]
 208:Src/YAB_fat32.c **** }
 344              		.loc 1 208 3 is_stmt 1 view .LVU98
 208:Src/YAB_fat32.c **** }
 345              		.loc 1 208 10 is_stmt 0 view .LVU99
 346 0014 AA23     		movs	r3, #170
 347 0016 84F8FF31 		strb	r3, [r4, #511]
 209:Src/YAB_fat32.c **** 
 348              		.loc 1 209 1 view .LVU100
 349 001a 10BD     		pop	{r4, pc}
 209:Src/YAB_fat32.c **** 
 350              		.loc 1 209 1 view .LVU101
 351              		.cfi_endproc
 352              	.LFE67:
ARM GAS  /tmp/ccgfkiBj.s 			page 13


 354              		.section	.rodata._fat32_read_dir_entry.str1.4,"aMS",%progbits,1
 355              		.align	2
 356              	.LC1:
 357 0000 59414220 		.ascii	"YAB Disk   \000"
 357      4469736B 
 357      20202000 
 358              		.align	2
 359              	.LC2:
 360 000c 46313033 		.ascii	"F103_APPBIN\000"
 360      5F415050 
 360      42494E00 
 361              		.section	.text._fat32_read_dir_entry,"ax",%progbits
 362              		.align	1
 363              		.syntax unified
 364              		.thumb
 365              		.thumb_func
 366              		.fpu softvfp
 368              	_fat32_read_dir_entry:
 369              	.LVL25:
 370              	.LFB69:
 258:Src/YAB_fat32.c **** 
 259:Src/YAB_fat32.c **** // Addr: 0x0040_0000
 260:Src/YAB_fat32.c **** static void _fat32_read_dir_entry(uint8_t *b)
 261:Src/YAB_fat32.c **** {
 371              		.loc 1 261 1 is_stmt 1 view -0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 0
 374              		@ frame_needed = 0, uses_anonymous_args = 0
 375              		.loc 1 261 1 is_stmt 0 view .LVU103
 376 0000 70B5     		push	{r4, r5, r6, lr}
 377              	.LCFI5:
 378              		.cfi_def_cfa_offset 16
 379              		.cfi_offset 4, -16
 380              		.cfi_offset 5, -12
 381              		.cfi_offset 6, -8
 382              		.cfi_offset 14, -4
 383 0002 0446     		mov	r4, r0
 262:Src/YAB_fat32.c ****   fat32_dir_entry_t *dir = (fat32_dir_entry_t*)b;
 384              		.loc 1 262 3 is_stmt 1 view .LVU104
 385              	.LVL26:
 263:Src/YAB_fat32.c ****   memset(b, 0, FAT32_SECTOR_SIZE);
 386              		.loc 1 263 3 view .LVU105
 387 0004 4FF40072 		mov	r2, #512
 388 0008 0021     		movs	r1, #0
 389 000a FFF7FEFF 		bl	memset
 390              	.LVL27:
 264:Src/YAB_fat32.c ****   
 265:Src/YAB_fat32.c ****   memcpy(dir->DIR_Name, APP_DRIVE_NAME, 11);
 391              		.loc 1 265 3 view .LVU106
 392 000e 2E4B     		ldr	r3, .L27
 393 0010 03CB     		ldmia	r3!, {r0, r1}
 394 0012 2060     		str	r0, [r4]	@ unaligned
 395 0014 6160     		str	r1, [r4, #4]	@ unaligned
 396 0016 1A88     		ldrh	r2, [r3]	@ unaligned
 397 0018 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 398 001a 2281     		strh	r2, [r4, #8]	@ unaligned
 399 001c A372     		strb	r3, [r4, #10]
ARM GAS  /tmp/ccgfkiBj.s 			page 14


 266:Src/YAB_fat32.c ****   dir->DIR_Attr = FAT32_ATTR_VOLUME_ID;
 400              		.loc 1 266 3 view .LVU107
 401              		.loc 1 266 17 is_stmt 0 view .LVU108
 402 001e 0823     		movs	r3, #8
 403 0020 E372     		strb	r3, [r4, #11]
 267:Src/YAB_fat32.c ****   dir->DIR_NTRes = 0x00;
 404              		.loc 1 267 3 is_stmt 1 view .LVU109
 405              		.loc 1 267 18 is_stmt 0 view .LVU110
 406 0022 0023     		movs	r3, #0
 407 0024 2373     		strb	r3, [r4, #12]
 268:Src/YAB_fat32.c ****   dir->DIR_CrtTimeTenth = 0x00;
 408              		.loc 1 268 3 is_stmt 1 view .LVU111
 409              		.loc 1 268 25 is_stmt 0 view .LVU112
 410 0026 6373     		strb	r3, [r4, #13]
 269:Src/YAB_fat32.c ****   dir->DIR_CrtTime = 0x0000;
 411              		.loc 1 269 3 is_stmt 1 view .LVU113
 412              		.loc 1 269 20 is_stmt 0 view .LVU114
 413 0028 A373     		strb	r3, [r4, #14]
 414 002a E373     		strb	r3, [r4, #15]
 270:Src/YAB_fat32.c ****   dir->DIR_CrtDate = 0x0000;
 415              		.loc 1 270 3 is_stmt 1 view .LVU115
 416              		.loc 1 270 20 is_stmt 0 view .LVU116
 417 002c 2374     		strb	r3, [r4, #16]
 418 002e 6374     		strb	r3, [r4, #17]
 271:Src/YAB_fat32.c ****   dir->DIR_LstAccDate = 0x0000;
 419              		.loc 1 271 3 is_stmt 1 view .LVU117
 420              		.loc 1 271 23 is_stmt 0 view .LVU118
 421 0030 A374     		strb	r3, [r4, #18]
 422 0032 E374     		strb	r3, [r4, #19]
 272:Src/YAB_fat32.c ****   dir->DIR_FstClusHI = 0x0000;
 423              		.loc 1 272 3 is_stmt 1 view .LVU119
 424              		.loc 1 272 22 is_stmt 0 view .LVU120
 425 0034 2375     		strb	r3, [r4, #20]
 426 0036 6375     		strb	r3, [r4, #21]
 273:Src/YAB_fat32.c ****   dir->DIR_WrtTime = FAT32_MAKE_TIME(0,0);
 427              		.loc 1 273 3 is_stmt 1 view .LVU121
 428              		.loc 1 273 20 is_stmt 0 view .LVU122
 429 0038 A375     		strb	r3, [r4, #22]
 430 003a E375     		strb	r3, [r4, #23]
 274:Src/YAB_fat32.c ****   dir->DIR_WrtDate = FAT32_MAKE_DATE(28,04,2020);
 431              		.loc 1 274 3 is_stmt 1 view .LVU123
 432              		.loc 1 274 20 is_stmt 0 view .LVU124
 433 003c 6FF06306 		mvn	r6, #99
 434 0040 2676     		strb	r6, [r4, #24]
 435 0042 5025     		movs	r5, #80
 436 0044 6576     		strb	r5, [r4, #25]
 275:Src/YAB_fat32.c ****   dir->DIR_FstClusLO = 0x0000;
 437              		.loc 1 275 3 is_stmt 1 view .LVU125
 438              		.loc 1 275 22 is_stmt 0 view .LVU126
 439 0046 A376     		strb	r3, [r4, #26]
 440 0048 E376     		strb	r3, [r4, #27]
 276:Src/YAB_fat32.c ****   dir->DIR_FileSize = 0x00000000;
 441              		.loc 1 276 3 is_stmt 1 view .LVU127
 442              		.loc 1 276 21 is_stmt 0 view .LVU128
 443 004a 2377     		strb	r3, [r4, #28]
 444 004c 6377     		strb	r3, [r4, #29]
 445 004e A377     		strb	r3, [r4, #30]
ARM GAS  /tmp/ccgfkiBj.s 			page 15


 446 0050 E377     		strb	r3, [r4, #31]
 277:Src/YAB_fat32.c ****   
 278:Src/YAB_fat32.c ****   ++dir;
 447              		.loc 1 278 3 is_stmt 1 view .LVU129
 448              	.LVL28:
 279:Src/YAB_fat32.c ****   
 280:Src/YAB_fat32.c ****   memcpy(dir->DIR_Name, APP_FILE_NAME, 11);
 449              		.loc 1 280 3 view .LVU130
 450 0052 1E4A     		ldr	r2, .L27+4
 451 0054 03CA     		ldmia	r2!, {r0, r1}
 452 0056 2062     		str	r0, [r4, #32]	@ unaligned
 453 0058 6162     		str	r1, [r4, #36]	@ unaligned
 454 005a 1188     		ldrh	r1, [r2]	@ unaligned
 455 005c 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 456 005e 2185     		strh	r1, [r4, #40]	@ unaligned
 457 0060 84F82A20 		strb	r2, [r4, #42]
 281:Src/YAB_fat32.c ****   dir->DIR_Attr = FAT32_ATTR_ARCHIVE;
 458              		.loc 1 281 3 view .LVU131
 459              		.loc 1 281 17 is_stmt 0 view .LVU132
 460 0064 2022     		movs	r2, #32
 461 0066 84F82B20 		strb	r2, [r4, #43]
 282:Src/YAB_fat32.c ****   dir->DIR_NTRes = 0x18;
 462              		.loc 1 282 3 is_stmt 1 view .LVU133
 463              		.loc 1 282 18 is_stmt 0 view .LVU134
 464 006a 1822     		movs	r2, #24
 465 006c 84F82C20 		strb	r2, [r4, #44]
 283:Src/YAB_fat32.c ****   dir->DIR_CrtTimeTenth = 0x00;
 466              		.loc 1 283 3 is_stmt 1 view .LVU135
 467              		.loc 1 283 25 is_stmt 0 view .LVU136
 468 0070 84F82D30 		strb	r3, [r4, #45]
 284:Src/YAB_fat32.c ****   dir->DIR_CrtTime = FAT32_MAKE_TIME(0,0);
 469              		.loc 1 284 3 is_stmt 1 view .LVU137
 470              		.loc 1 284 20 is_stmt 0 view .LVU138
 471 0074 84F82E30 		strb	r3, [r4, #46]
 472 0078 84F82F30 		strb	r3, [r4, #47]
 285:Src/YAB_fat32.c ****   dir->DIR_CrtDate = FAT32_MAKE_DATE(28,04,2020);
 473              		.loc 1 285 3 is_stmt 1 view .LVU139
 474              		.loc 1 285 20 is_stmt 0 view .LVU140
 475 007c 84F83060 		strb	r6, [r4, #48]
 476 0080 84F83150 		strb	r5, [r4, #49]
 286:Src/YAB_fat32.c ****   dir->DIR_LstAccDate = FAT32_MAKE_DATE(28,04,2020);
 477              		.loc 1 286 3 is_stmt 1 view .LVU141
 478              		.loc 1 286 23 is_stmt 0 view .LVU142
 479 0084 84F83260 		strb	r6, [r4, #50]
 480 0088 84F83350 		strb	r5, [r4, #51]
 287:Src/YAB_fat32.c ****   dir->DIR_FstClusHI = 0x0000;
 481              		.loc 1 287 3 is_stmt 1 view .LVU143
 482              		.loc 1 287 22 is_stmt 0 view .LVU144
 483 008c 84F83430 		strb	r3, [r4, #52]
 484 0090 84F83530 		strb	r3, [r4, #53]
 288:Src/YAB_fat32.c ****   dir->DIR_WrtTime = FAT32_MAKE_TIME(0,0);
 485              		.loc 1 288 3 is_stmt 1 view .LVU145
 486              		.loc 1 288 20 is_stmt 0 view .LVU146
 487 0094 84F83630 		strb	r3, [r4, #54]
 488 0098 84F83730 		strb	r3, [r4, #55]
 289:Src/YAB_fat32.c ****   dir->DIR_WrtDate = FAT32_MAKE_DATE(28,04,2020);
 489              		.loc 1 289 3 is_stmt 1 view .LVU147
ARM GAS  /tmp/ccgfkiBj.s 			page 16


 490              		.loc 1 289 20 is_stmt 0 view .LVU148
 491 009c 84F83860 		strb	r6, [r4, #56]
 492 00a0 84F83950 		strb	r5, [r4, #57]
 290:Src/YAB_fat32.c ****   dir->DIR_FstClusLO = 0x0005;
 493              		.loc 1 290 3 is_stmt 1 view .LVU149
 494              		.loc 1 290 22 is_stmt 0 view .LVU150
 495 00a4 0522     		movs	r2, #5
 496 00a6 84F83A20 		strb	r2, [r4, #58]
 497 00aa 84F83B30 		strb	r3, [r4, #59]
 291:Src/YAB_fat32.c ****   dir->DIR_FileSize = APP_SIZE;
 498              		.loc 1 291 3 is_stmt 1 view .LVU151
 499              		.loc 1 291 21 is_stmt 0 view .LVU152
 500 00ae 84F83C30 		strb	r3, [r4, #60]
 501 00b2 6FF03F02 		mvn	r2, #63
 502 00b6 84F83D20 		strb	r2, [r4, #61]
 503 00ba 0322     		movs	r2, #3
 504 00bc 84F83E20 		strb	r2, [r4, #62]
 505 00c0 84F83F30 		strb	r3, [r4, #63]
 292:Src/YAB_fat32.c **** }
 506              		.loc 1 292 1 view .LVU153
 507 00c4 70BD     		pop	{r4, r5, r6, pc}
 508              	.LVL29:
 509              	.L28:
 510              		.loc 1 292 1 view .LVU154
 511 00c6 00BF     		.align	2
 512              	.L27:
 513 00c8 00000000 		.word	.LC1
 514 00cc 0C000000 		.word	.LC2
 515              		.cfi_endproc
 516              	.LFE69:
 518              		.section	.text._fat32_read_firmware,"ax",%progbits
 519              		.align	1
 520              		.syntax unified
 521              		.thumb
 522              		.thumb_func
 523              		.fpu softvfp
 525              	_fat32_read_firmware:
 526              	.LVL30:
 527              	.LFB70:
 293:Src/YAB_fat32.c **** 
 294:Src/YAB_fat32.c **** // Addr : 0x0040_0600
 295:Src/YAB_fat32.c **** static void _fat32_read_firmware(uint8_t *b, uint32_t addr)
 296:Src/YAB_fat32.c **** {
 528              		.loc 1 296 1 is_stmt 1 view -0
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 0
 531              		@ frame_needed = 0, uses_anonymous_args = 0
 532              		.loc 1 296 1 is_stmt 0 view .LVU156
 533 0000 10B5     		push	{r4, lr}
 534              	.LCFI6:
 535              		.cfi_def_cfa_offset 8
 536              		.cfi_offset 4, -8
 537              		.cfi_offset 14, -4
 297:Src/YAB_fat32.c ****   #if APP_READBACK_ENABLE
 298:Src/YAB_fat32.c ****     uint32_t offset = addr - fw_addr_range.begin;
 538              		.loc 1 298 5 is_stmt 1 view .LVU157
 539              		.loc 1 298 43 is_stmt 0 view .LVU158
ARM GAS  /tmp/ccgfkiBj.s 			page 17


 540 0002 094B     		ldr	r3, .L31
 541 0004 1B68     		ldr	r3, [r3]
 542              		.loc 1 298 14 view .LVU159
 543 0006 CC1A     		subs	r4, r1, r3
 544              	.LVL31:
 299:Src/YAB_fat32.c ****     uint32_t addr_end = MIN(offset + FAT32_SECTOR_SIZE, APP_SIZE);
 545              		.loc 1 299 5 is_stmt 1 view .LVU160
 546              		.loc 1 299 25 is_stmt 0 view .LVU161
 547 0008 04F50072 		add	r2, r4, #512
 548              	.LVL32:
 300:Src/YAB_fat32.c ****     int32_t total_size = addr_end - offset;
 549              		.loc 1 300 5 is_stmt 1 view .LVU162
 550              		.loc 1 300 35 is_stmt 0 view .LVU163
 551 000c 5B1A     		subs	r3, r3, r1
 552              	.LVL33:
 301:Src/YAB_fat32.c ****     
 302:Src/YAB_fat32.c ****     memcpy(b, (void*)(APP_ADDR + offset), total_size);
 553              		.loc 1 302 5 is_stmt 1 view .LVU164
 554 000e B2F5703F 		cmp	r2, #245760
 555 0012 94BF     		ite	ls
 556 0014 9A18     		addls	r2, r3, r2
 557 0016 03F57032 		addhi	r2, r3, #245760
 558              	.LVL34:
 559              		.loc 1 302 5 is_stmt 0 view .LVU165
 560 001a 04F10061 		add	r1, r4, #134217728
 561              	.LVL35:
 562              		.loc 1 302 5 view .LVU166
 563 001e 01F58041 		add	r1, r1, #16384
 564 0022 FFF7FEFF 		bl	memcpy
 565              	.LVL36:
 303:Src/YAB_fat32.c ****   #else
 304:Src/YAB_fat32.c ****     memset(b, 0x00, FAT32_SECTOR_SIZE);
 305:Src/YAB_fat32.c ****   #endif
 306:Src/YAB_fat32.c **** }
 566              		.loc 1 306 1 view .LVU167
 567 0026 10BD     		pop	{r4, pc}
 568              	.LVL37:
 569              	.L32:
 570              		.loc 1 306 1 view .LVU168
 571              		.align	2
 572              	.L31:
 573 0028 00000000 		.word	.LANCHOR1
 574              		.cfi_endproc
 575              	.LFE70:
 577              		.section	.text._fat32_write_firmware,"ax",%progbits
 578              		.align	1
 579              		.syntax unified
 580              		.thumb
 581              		.thumb_func
 582              		.fpu softvfp
 584              	_fat32_write_firmware:
 585              	.LVL38:
 586              	.LFB71:
 307:Src/YAB_fat32.c **** 
 308:Src/YAB_fat32.c **** static bool _fat32_write_firmware(const uint8_t *b, uint32_t addr)
 309:Src/YAB_fat32.c **** {
 587              		.loc 1 309 1 is_stmt 1 view -0
ARM GAS  /tmp/ccgfkiBj.s 			page 18


 588              		.cfi_startproc
 589              		@ args = 0, pretend = 0, frame = 24
 590              		@ frame_needed = 0, uses_anonymous_args = 0
 591              		.loc 1 309 1 is_stmt 0 view .LVU170
 592 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 593              	.LCFI7:
 594              		.cfi_def_cfa_offset 24
 595              		.cfi_offset 4, -24
 596              		.cfi_offset 5, -20
 597              		.cfi_offset 6, -16
 598              		.cfi_offset 7, -12
 599              		.cfi_offset 8, -8
 600              		.cfi_offset 14, -4
 601 0004 86B0     		sub	sp, sp, #24
 602              	.LCFI8:
 603              		.cfi_def_cfa_offset 48
 604 0006 0746     		mov	r7, r0
 605 0008 0C46     		mov	r4, r1
 310:Src/YAB_fat32.c ****   bool return_status = true;
 606              		.loc 1 310 3 is_stmt 1 view .LVU171
 607              	.LVL39:
 311:Src/YAB_fat32.c ****   
 312:Src/YAB_fat32.c **** #if LED_ENABLE
 313:Src/YAB_fat32.c ****   LED_OFF;
 608              		.loc 1 313 3 view .LVU172
 609 000a 0122     		movs	r2, #1
 610 000c 0221     		movs	r1, #2
 611              	.LVL40:
 612              		.loc 1 313 3 is_stmt 0 view .LVU173
 613 000e 2448     		ldr	r0, .L45
 614              	.LVL41:
 615              		.loc 1 313 3 view .LVU174
 616 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 617              	.LVL42:
 314:Src/YAB_fat32.c ****   LED_On_Time = LED_OFF_NOBLINK;
 618              		.loc 1 314 3 is_stmt 1 view .LVU175
 619              		.loc 1 314 15 is_stmt 0 view .LVU176
 620 0014 234B     		ldr	r3, .L45+4
 621 0016 0022     		movs	r2, #0
 622 0018 1A70     		strb	r2, [r3]
 315:Src/YAB_fat32.c **** #endif //#if LED_ENABLE
 316:Src/YAB_fat32.c ****   
 317:Src/YAB_fat32.c ****   HAL_StatusTypeDef status;
 623              		.loc 1 317 3 is_stmt 1 view .LVU177
 318:Src/YAB_fat32.c ****   
 319:Src/YAB_fat32.c ****   HAL_FLASH_Unlock();
 624              		.loc 1 319 3 view .LVU178
 625 001a FFF7FEFF 		bl	HAL_FLASH_Unlock
 626              	.LVL43:
 320:Src/YAB_fat32.c ****   
 321:Src/YAB_fat32.c ****   uint32_t offset = addr - fw_addr_range.begin;
 627              		.loc 1 321 3 view .LVU179
 628              		.loc 1 321 41 is_stmt 0 view .LVU180
 629 001e 224A     		ldr	r2, .L45+8
 630 0020 1368     		ldr	r3, [r2]
 631              		.loc 1 321 12 view .LVU181
 632 0022 A4EB0308 		sub	r8, r4, r3
ARM GAS  /tmp/ccgfkiBj.s 			page 19


 633              	.LVL44:
 322:Src/YAB_fat32.c ****   uint32_t phy_addr = APP_ADDR + offset;
 634              		.loc 1 322 3 is_stmt 1 view .LVU182
 635              		.loc 1 322 12 is_stmt 0 view .LVU183
 636 0026 08F10066 		add	r6, r8, #134217728
 637 002a 06F58046 		add	r6, r6, #16384
 638              	.LVL45:
 323:Src/YAB_fat32.c ****   uint32_t prog_size = MIN(FAT32_SECTOR_SIZE, fw_addr_range.end - fw_addr_range.begin);
 639              		.loc 1 323 3 is_stmt 1 view .LVU184
 640              		.loc 1 323 24 is_stmt 0 view .LVU185
 641 002e 5568     		ldr	r5, [r2, #4]
 642 0030 ED1A     		subs	r5, r5, r3
 643              		.loc 1 323 12 view .LVU186
 644 0032 B5F5007F 		cmp	r5, #512
 645 0036 28BF     		it	cs
 646 0038 4FF40075 		movcs	r5, #512
 647              	.LVL46:
 324:Src/YAB_fat32.c ****   
 325:Src/YAB_fat32.c ****   if(prog_size & 0x03)
 648              		.loc 1 325 3 is_stmt 1 view .LVU187
 649              		.loc 1 325 5 is_stmt 0 view .LVU188
 650 003c 15F0030F 		tst	r5, #3
 651 0040 00D0     		beq	.L34
 326:Src/YAB_fat32.c ****   {
 327:Src/YAB_fat32.c ****     prog_size += 4;
 652              		.loc 1 327 5 is_stmt 1 view .LVU189
 653              		.loc 1 327 15 is_stmt 0 view .LVU190
 654 0042 0435     		adds	r5, r5, #4
 655              	.LVL47:
 656              	.L34:
 328:Src/YAB_fat32.c ****   }
 329:Src/YAB_fat32.c ****   
 330:Src/YAB_fat32.c ****   if(addr == fw_addr_range.begin)
 657              		.loc 1 330 3 is_stmt 1 view .LVU191
 658              		.loc 1 330 5 is_stmt 0 view .LVU192
 659 0044 A342     		cmp	r3, r4
 660 0046 0CD0     		beq	.L43
 661              	.L35:
 331:Src/YAB_fat32.c ****   {
 332:Src/YAB_fat32.c ****     // Erase the APPCODE area
 333:Src/YAB_fat32.c ****     uint32_t PageError = 0;
 334:Src/YAB_fat32.c ****     
 335:Src/YAB_fat32.c ****     #ifdef STM32F103xB
 336:Src/YAB_fat32.c ****       FLASH_EraseInitTypeDef eraseinitstruct;
 337:Src/YAB_fat32.c ****       
 338:Src/YAB_fat32.c ****       eraseinitstruct.TypeErase = FLASH_TYPEERASE_PAGES;
 339:Src/YAB_fat32.c ****       eraseinitstruct.PageAddress = APP_ADDR;
 340:Src/YAB_fat32.c ****       eraseinitstruct.NbPages = APP_SIZE / FLASH_ERASE_PAGE_SIZE;
 341:Src/YAB_fat32.c ****       status = HAL_FLASHEx_Erase(&eraseinitstruct, &PageError);
 342:Src/YAB_fat32.c ****       
 343:Src/YAB_fat32.c ****     #elif defined STM32F407xx
 344:Src/YAB_fat32.c ****       FLASH_EraseInitTypeDef eraseinitstruct;
 345:Src/YAB_fat32.c ****       
 346:Src/YAB_fat32.c ****       eraseinitstruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 347:Src/YAB_fat32.c ****       eraseinitstruct.Banks = FLASH_BANK_1;
 348:Src/YAB_fat32.c ****       eraseinitstruct.Sector = FLASH_ERASE_SECTOR;
 349:Src/YAB_fat32.c ****       eraseinitstruct.NbSectors = FLASH_ERASE_NBSECTORS;
ARM GAS  /tmp/ccgfkiBj.s 			page 20


 350:Src/YAB_fat32.c ****       eraseinitstruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 351:Src/YAB_fat32.c ****       
 352:Src/YAB_fat32.c ****       status = HAL_FLASHEx_Erase(&eraseinitstruct, &PageError);
 353:Src/YAB_fat32.c ****       
 354:Src/YAB_fat32.c ****     #elif defined STM32F723xx
 355:Src/YAB_fat32.c ****       FLASH_EraseInitTypeDef eraseinitstruct;
 356:Src/YAB_fat32.c ****       
 357:Src/YAB_fat32.c ****       eraseinitstruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 358:Src/YAB_fat32.c ****       eraseinitstruct.Sector = FLASH_ERASE_SECTOR;
 359:Src/YAB_fat32.c ****       eraseinitstruct.NbSectors = FLASH_ERASE_NBSECTORS;
 360:Src/YAB_fat32.c ****       eraseinitstruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 361:Src/YAB_fat32.c ****       
 362:Src/YAB_fat32.c ****       status = HAL_FLASHEx_Erase(&eraseinitstruct, &PageError);
 363:Src/YAB_fat32.c ****       
 364:Src/YAB_fat32.c ****     #else
 365:Src/YAB_fat32.c ****     #error "!!!!!! This special MCU Flash erase function not defined !!!!!!"
 366:Src/YAB_fat32.c ****     #endif //#ifdef MCU_STM32F103CBT6
 367:Src/YAB_fat32.c ****     
 368:Src/YAB_fat32.c ****     if(status != HAL_OK)
 369:Src/YAB_fat32.c ****     {
 370:Src/YAB_fat32.c ****       return_status = false;
 371:Src/YAB_fat32.c ****       goto EXIT;
 372:Src/YAB_fat32.c ****     }
 373:Src/YAB_fat32.c ****   }
 374:Src/YAB_fat32.c ****   
 375:Src/YAB_fat32.c ****   if((phy_addr >= APP_ADDR) && (phy_addr < (APP_ADDR + APP_SIZE)) )
 662              		.loc 1 375 3 is_stmt 1 view .LVU193
 663              		.loc 1 375 5 is_stmt 0 view .LVU194
 664 0048 B8F5703F 		cmp	r8, #245760
 665 004c 18D3     		bcc	.L40
 310:Src/YAB_fat32.c ****   
 666              		.loc 1 310 8 view .LVU195
 667 004e 0124     		movs	r4, #1
 668              	.LVL48:
 669              	.L37:
 376:Src/YAB_fat32.c ****   {
 377:Src/YAB_fat32.c ****     uint32_t i = 0;
 378:Src/YAB_fat32.c ****     
 379:Src/YAB_fat32.c ****     for(i=0; i<prog_size; i+=4)
 380:Src/YAB_fat32.c ****     {
 381:Src/YAB_fat32.c ****       const uint8_t *wbuf = b + i;
 382:Src/YAB_fat32.c ****       status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, phy_addr + i, *((uint32_t*)wbuf));
 383:Src/YAB_fat32.c ****       if(status != HAL_OK)
 384:Src/YAB_fat32.c ****       {
 385:Src/YAB_fat32.c ****         return_status = false;
 386:Src/YAB_fat32.c ****         goto EXIT;
 387:Src/YAB_fat32.c ****       }
 388:Src/YAB_fat32.c ****     }
 389:Src/YAB_fat32.c ****   }
 390:Src/YAB_fat32.c **** EXIT:
 391:Src/YAB_fat32.c ****   HAL_FLASH_Lock();
 670              		.loc 1 391 3 is_stmt 1 view .LVU196
 671 0050 FFF7FEFF 		bl	HAL_FLASH_Lock
 672              	.LVL49:
 392:Src/YAB_fat32.c ****   
 393:Src/YAB_fat32.c **** #if LED_ENABLE
 394:Src/YAB_fat32.c ****   LED_On_Time = LED_ON_NOBLINK; //LED ON, stable
ARM GAS  /tmp/ccgfkiBj.s 			page 21


 673              		.loc 1 394 3 view .LVU197
 674              		.loc 1 394 15 is_stmt 0 view .LVU198
 675 0054 134B     		ldr	r3, .L45+4
 676 0056 FF22     		movs	r2, #255
 677 0058 1A70     		strb	r2, [r3]
 395:Src/YAB_fat32.c **** #endif //#if LED_ENABLE
 396:Src/YAB_fat32.c ****   
 397:Src/YAB_fat32.c ****   return return_status;
 678              		.loc 1 397 3 is_stmt 1 view .LVU199
 398:Src/YAB_fat32.c **** }
 679              		.loc 1 398 1 is_stmt 0 view .LVU200
 680 005a 2046     		mov	r0, r4
 681 005c 06B0     		add	sp, sp, #24
 682              	.LCFI9:
 683              		.cfi_remember_state
 684              		.cfi_def_cfa_offset 24
 685              		@ sp needed
 686 005e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 687              	.LVL50:
 688              	.L43:
 689              	.LCFI10:
 690              		.cfi_restore_state
 691              	.LBB2:
 333:Src/YAB_fat32.c ****     
 692              		.loc 1 333 5 is_stmt 1 view .LVU201
 333:Src/YAB_fat32.c ****     
 693              		.loc 1 333 14 is_stmt 0 view .LVU202
 694 0062 0023     		movs	r3, #0
 695 0064 0193     		str	r3, [sp, #4]
 336:Src/YAB_fat32.c ****       
 696              		.loc 1 336 7 is_stmt 1 view .LVU203
 338:Src/YAB_fat32.c ****       eraseinitstruct.PageAddress = APP_ADDR;
 697              		.loc 1 338 7 view .LVU204
 338:Src/YAB_fat32.c ****       eraseinitstruct.PageAddress = APP_ADDR;
 698              		.loc 1 338 33 is_stmt 0 view .LVU205
 699 0066 0293     		str	r3, [sp, #8]
 339:Src/YAB_fat32.c ****       eraseinitstruct.NbPages = APP_SIZE / FLASH_ERASE_PAGE_SIZE;
 700              		.loc 1 339 7 is_stmt 1 view .LVU206
 339:Src/YAB_fat32.c ****       eraseinitstruct.NbPages = APP_SIZE / FLASH_ERASE_PAGE_SIZE;
 701              		.loc 1 339 35 is_stmt 0 view .LVU207
 702 0068 104B     		ldr	r3, .L45+12
 703 006a 0493     		str	r3, [sp, #16]
 340:Src/YAB_fat32.c ****       status = HAL_FLASHEx_Erase(&eraseinitstruct, &PageError);
 704              		.loc 1 340 7 is_stmt 1 view .LVU208
 340:Src/YAB_fat32.c ****       status = HAL_FLASHEx_Erase(&eraseinitstruct, &PageError);
 705              		.loc 1 340 31 is_stmt 0 view .LVU209
 706 006c F023     		movs	r3, #240
 707 006e 0593     		str	r3, [sp, #20]
 341:Src/YAB_fat32.c ****       
 708              		.loc 1 341 7 is_stmt 1 view .LVU210
 341:Src/YAB_fat32.c ****       
 709              		.loc 1 341 16 is_stmt 0 view .LVU211
 710 0070 01A9     		add	r1, sp, #4
 711 0072 02A8     		add	r0, sp, #8
 712 0074 FFF7FEFF 		bl	HAL_FLASHEx_Erase
 713              	.LVL51:
 368:Src/YAB_fat32.c ****     {
ARM GAS  /tmp/ccgfkiBj.s 			page 22


 714              		.loc 1 368 5 is_stmt 1 view .LVU212
 368:Src/YAB_fat32.c ****     {
 715              		.loc 1 368 7 is_stmt 0 view .LVU213
 716 0078 0028     		cmp	r0, #0
 717 007a E5D0     		beq	.L35
 370:Src/YAB_fat32.c ****       goto EXIT;
 718              		.loc 1 370 7 is_stmt 1 view .LVU214
 719              	.LVL52:
 371:Src/YAB_fat32.c ****     }
 720              		.loc 1 371 7 view .LVU215
 370:Src/YAB_fat32.c ****       goto EXIT;
 721              		.loc 1 370 21 is_stmt 0 view .LVU216
 722 007c 0024     		movs	r4, #0
 723              	.LVL53:
 370:Src/YAB_fat32.c ****       goto EXIT;
 724              		.loc 1 370 21 view .LVU217
 725 007e E7E7     		b	.L37
 726              	.LVL54:
 727              	.L40:
 370:Src/YAB_fat32.c ****       goto EXIT;
 728              		.loc 1 370 21 view .LVU218
 729              	.LBE2:
 730              	.LBB3:
 379:Src/YAB_fat32.c ****     {
 731              		.loc 1 379 10 view .LVU219
 732 0080 0024     		movs	r4, #0
 733              	.LVL55:
 734              	.L38:
 379:Src/YAB_fat32.c ****     {
 735              		.loc 1 379 14 is_stmt 1 discriminator 1 view .LVU220
 379:Src/YAB_fat32.c ****     {
 736              		.loc 1 379 5 is_stmt 0 discriminator 1 view .LVU221
 737 0082 A542     		cmp	r5, r4
 738 0084 08D9     		bls	.L44
 739              	.LBB4:
 381:Src/YAB_fat32.c ****       status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, phy_addr + i, *((uint32_t*)wbuf));
 740              		.loc 1 381 7 is_stmt 1 view .LVU222
 741              	.LVL56:
 382:Src/YAB_fat32.c ****       if(status != HAL_OK)
 742              		.loc 1 382 7 view .LVU223
 382:Src/YAB_fat32.c ****       if(status != HAL_OK)
 743              		.loc 1 382 16 is_stmt 0 view .LVU224
 744 0086 3A59     		ldr	r2, [r7, r4]
 745 0088 0023     		movs	r3, #0
 746 008a A119     		adds	r1, r4, r6
 747 008c 0220     		movs	r0, #2
 748 008e FFF7FEFF 		bl	HAL_FLASH_Program
 749              	.LVL57:
 383:Src/YAB_fat32.c ****       {
 750              		.loc 1 383 7 is_stmt 1 view .LVU225
 383:Src/YAB_fat32.c ****       {
 751              		.loc 1 383 9 is_stmt 0 view .LVU226
 752 0092 18B9     		cbnz	r0, .L41
 753              	.LBE4:
 379:Src/YAB_fat32.c ****     {
 754              		.loc 1 379 27 is_stmt 1 discriminator 2 view .LVU227
 379:Src/YAB_fat32.c ****     {
ARM GAS  /tmp/ccgfkiBj.s 			page 23


 755              		.loc 1 379 28 is_stmt 0 discriminator 2 view .LVU228
 756 0094 0434     		adds	r4, r4, #4
 757              	.LVL58:
 379:Src/YAB_fat32.c ****     {
 758              		.loc 1 379 28 discriminator 2 view .LVU229
 759 0096 F4E7     		b	.L38
 760              	.LVL59:
 761              	.L44:
 379:Src/YAB_fat32.c ****     {
 762              		.loc 1 379 28 discriminator 2 view .LVU230
 763              	.LBE3:
 310:Src/YAB_fat32.c ****   
 764              		.loc 1 310 8 view .LVU231
 765 0098 0124     		movs	r4, #1
 766              	.LVL60:
 390:Src/YAB_fat32.c ****   HAL_FLASH_Lock();
 767              		.loc 1 390 1 view .LVU232
 768 009a D9E7     		b	.L37
 769              	.LVL61:
 770              	.L41:
 771              	.LBB6:
 772              	.LBB5:
 385:Src/YAB_fat32.c ****         goto EXIT;
 773              		.loc 1 385 23 view .LVU233
 774 009c 0024     		movs	r4, #0
 775              	.LVL62:
 385:Src/YAB_fat32.c ****         goto EXIT;
 776              		.loc 1 385 23 view .LVU234
 777 009e D7E7     		b	.L37
 778              	.L46:
 779              		.align	2
 780              	.L45:
 781 00a0 00100140 		.word	1073811456
 782 00a4 00000000 		.word	LED_On_Time
 783 00a8 00000000 		.word	.LANCHOR1
 784 00ac 00400008 		.word	134234112
 785              	.LBE5:
 786              	.LBE6:
 787              		.cfi_endproc
 788              	.LFE71:
 790              		.section	.text.fat32_read,"ax",%progbits
 791              		.align	1
 792              		.global	fat32_read
 793              		.syntax unified
 794              		.thumb
 795              		.thumb_func
 796              		.fpu softvfp
 798              	fat32_read:
 799              	.LVL63:
 800              	.LFB72:
 399:Src/YAB_fat32.c **** 
 400:Src/YAB_fat32.c **** //-------------------------------------------------------
 401:Src/YAB_fat32.c **** 
 402:Src/YAB_fat32.c **** // sector size should be 512 byte
 403:Src/YAB_fat32.c **** 
 404:Src/YAB_fat32.c **** bool fat32_read(uint8_t *b, uint32_t addr)
 405:Src/YAB_fat32.c **** {
ARM GAS  /tmp/ccgfkiBj.s 			page 24


 801              		.loc 1 405 1 is_stmt 1 view -0
 802              		.cfi_startproc
 803              		@ args = 0, pretend = 0, frame = 0
 804              		@ frame_needed = 0, uses_anonymous_args = 0
 805              		.loc 1 405 1 is_stmt 0 view .LVU236
 806 0000 08B5     		push	{r3, lr}
 807              	.LCFI11:
 808              		.cfi_def_cfa_offset 8
 809              		.cfi_offset 3, -8
 810              		.cfi_offset 14, -4
 406:Src/YAB_fat32.c ****   if(addr & (FAT32_SECTOR_SIZE - 1))      // if not align ?
 811              		.loc 1 406 3 is_stmt 1 view .LVU237
 812              		.loc 1 406 11 is_stmt 0 view .LVU238
 813 0002 C1F30803 		ubfx	r3, r1, #0, #9
 814              		.loc 1 406 5 view .LVU239
 815 0006 002B     		cmp	r3, #0
 816 0008 47D1     		bne	.L59
 407:Src/YAB_fat32.c ****   {
 408:Src/YAB_fat32.c ****     return false;
 409:Src/YAB_fat32.c ****   }
 410:Src/YAB_fat32.c ****   
 411:Src/YAB_fat32.c ****   if(addr == 0x0000 || addr == 0x0C00)
 817              		.loc 1 411 3 is_stmt 1 view .LVU240
 818              		.loc 1 411 5 is_stmt 0 view .LVU241
 819 000a 01B3     		cbz	r1, .L49
 820              		.loc 1 411 21 discriminator 1 view .LVU242
 821 000c B1F5406F 		cmp	r1, #3072
 822 0010 1DD0     		beq	.L49
 412:Src/YAB_fat32.c ****   {
 413:Src/YAB_fat32.c ****     _fat32_read_bpb(b);
 414:Src/YAB_fat32.c ****   }
 415:Src/YAB_fat32.c ****   else if(addr == 0x0200 || addr == 0x0E00)
 823              		.loc 1 415 8 is_stmt 1 view .LVU243
 824              		.loc 1 415 10 is_stmt 0 view .LVU244
 825 0012 B1F5007F 		cmp	r1, #512
 826 0016 1ED0     		beq	.L51
 827              		.loc 1 415 26 discriminator 1 view .LVU245
 828 0018 B1F5606F 		cmp	r1, #3584
 829 001c 1BD0     		beq	.L51
 416:Src/YAB_fat32.c ****   {
 417:Src/YAB_fat32.c ****     _fat32_read_fsinfo(b);
 418:Src/YAB_fat32.c ****   }
 419:Src/YAB_fat32.c ****   else if(addr == 0x0400 || addr == 0x1000)
 830              		.loc 1 419 8 is_stmt 1 view .LVU246
 831              		.loc 1 419 10 is_stmt 0 view .LVU247
 832 001e B1F5806F 		cmp	r1, #1024
 833 0022 1CD0     		beq	.L53
 834              		.loc 1 419 26 discriminator 1 view .LVU248
 835 0024 B1F5805F 		cmp	r1, #4096
 836 0028 19D0     		beq	.L53
 420:Src/YAB_fat32.c ****   {
 421:Src/YAB_fat32.c ****     _fat32_read_fsinfo2(b);
 422:Src/YAB_fat32.c ****   }
 423:Src/YAB_fat32.c ****   else if((addr >= 0x22F800 && addr < 0x231A00) || (addr >= 0x317C00&& addr < 0x319E00))
 837              		.loc 1 423 8 is_stmt 1 view .LVU249
 838              		.loc 1 423 29 is_stmt 0 view .LVU250
 839 002a A1F50B13 		sub	r3, r1, #2277376
ARM GAS  /tmp/ccgfkiBj.s 			page 25


 840 002e A3F56053 		sub	r3, r3, #14336
 841              		.loc 1 423 10 view .LVU251
 842 0032 B3F5085F 		cmp	r3, #8704
 843 0036 06D3     		bcc	.L55
 844              		.loc 1 423 69 discriminator 1 view .LVU252
 845 0038 A1F54513 		sub	r3, r1, #3227648
 846 003c A3F57053 		sub	r3, r3, #15360
 847              		.loc 1 423 49 discriminator 1 view .LVU253
 848 0040 B3F5085F 		cmp	r3, #8704
 849 0044 0FD2     		bcs	.L56
 850              	.L55:
 424:Src/YAB_fat32.c ****   {
 425:Src/YAB_fat32.c ****     _fat32_read_fat_table(b, addr);
 851              		.loc 1 425 5 is_stmt 1 view .LVU254
 852 0046 FFF7FEFF 		bl	_fat32_read_fat_table
 853              	.LVL64:
 426:Src/YAB_fat32.c ****   }
 427:Src/YAB_fat32.c ****   else if(addr == FAT32_DIR_ENTRY_ADDR)
 428:Src/YAB_fat32.c ****   {
 429:Src/YAB_fat32.c ****     _fat32_read_dir_entry(b);
 430:Src/YAB_fat32.c ****   }
 431:Src/YAB_fat32.c ****   else if(addr >= fw_addr_range.begin && addr < fw_addr_range.end)
 432:Src/YAB_fat32.c ****   {
 433:Src/YAB_fat32.c ****     _fat32_read_firmware(b, addr);
 434:Src/YAB_fat32.c ****   }
 435:Src/YAB_fat32.c ****   else
 436:Src/YAB_fat32.c ****   {
 437:Src/YAB_fat32.c ****     memset(b, 0x00, FAT32_SECTOR_SIZE);
 438:Src/YAB_fat32.c ****   }
 439:Src/YAB_fat32.c ****   
 440:Src/YAB_fat32.c ****   return true;
 854              		.loc 1 440 10 is_stmt 0 view .LVU255
 855 004a 0120     		movs	r0, #1
 425:Src/YAB_fat32.c ****   }
 856              		.loc 1 425 5 view .LVU256
 857 004c 02E0     		b	.L48
 858              	.LVL65:
 859              	.L49:
 413:Src/YAB_fat32.c ****   }
 860              		.loc 1 413 5 is_stmt 1 view .LVU257
 861 004e FFF7FEFF 		bl	_fat32_read_bpb
 862              	.LVL66:
 863              		.loc 1 440 10 is_stmt 0 view .LVU258
 864 0052 0120     		movs	r0, #1
 865              	.L48:
 441:Src/YAB_fat32.c **** }
 866              		.loc 1 441 1 view .LVU259
 867 0054 08BD     		pop	{r3, pc}
 868              	.LVL67:
 869              	.L51:
 417:Src/YAB_fat32.c ****   }
 870              		.loc 1 417 5 is_stmt 1 view .LVU260
 871 0056 FFF7FEFF 		bl	_fat32_read_fsinfo
 872              	.LVL68:
 440:Src/YAB_fat32.c **** }
 873              		.loc 1 440 10 is_stmt 0 view .LVU261
 874 005a 0120     		movs	r0, #1
ARM GAS  /tmp/ccgfkiBj.s 			page 26


 417:Src/YAB_fat32.c ****   }
 875              		.loc 1 417 5 view .LVU262
 876 005c FAE7     		b	.L48
 877              	.LVL69:
 878              	.L53:
 421:Src/YAB_fat32.c ****   }
 879              		.loc 1 421 5 is_stmt 1 view .LVU263
 880 005e FFF7FEFF 		bl	_fat32_read_fsinfo2
 881              	.LVL70:
 440:Src/YAB_fat32.c **** }
 882              		.loc 1 440 10 is_stmt 0 view .LVU264
 883 0062 0120     		movs	r0, #1
 421:Src/YAB_fat32.c ****   }
 884              		.loc 1 421 5 view .LVU265
 885 0064 F6E7     		b	.L48
 886              	.LVL71:
 887              	.L56:
 427:Src/YAB_fat32.c ****   {
 888              		.loc 1 427 8 is_stmt 1 view .LVU266
 427:Src/YAB_fat32.c ****   {
 889              		.loc 1 427 10 is_stmt 0 view .LVU267
 890 0066 B1F5800F 		cmp	r1, #4194304
 891 006a 0ED0     		beq	.L61
 431:Src/YAB_fat32.c ****   {
 892              		.loc 1 431 8 is_stmt 1 view .LVU268
 431:Src/YAB_fat32.c ****   {
 893              		.loc 1 431 32 is_stmt 0 view .LVU269
 894 006c 0C4B     		ldr	r3, .L63
 895 006e 1B68     		ldr	r3, [r3]
 431:Src/YAB_fat32.c ****   {
 896              		.loc 1 431 10 view .LVU270
 897 0070 8B42     		cmp	r3, r1
 898 0072 03D8     		bhi	.L58
 431:Src/YAB_fat32.c ****   {
 899              		.loc 1 431 62 discriminator 1 view .LVU271
 900 0074 0A4B     		ldr	r3, .L63
 901 0076 5B68     		ldr	r3, [r3, #4]
 431:Src/YAB_fat32.c ****   {
 902              		.loc 1 431 39 discriminator 1 view .LVU272
 903 0078 8B42     		cmp	r3, r1
 904 007a 0AD8     		bhi	.L62
 905              	.L58:
 437:Src/YAB_fat32.c ****   }
 906              		.loc 1 437 5 is_stmt 1 view .LVU273
 907 007c 4FF40072 		mov	r2, #512
 908 0080 0021     		movs	r1, #0
 909              	.LVL72:
 437:Src/YAB_fat32.c ****   }
 910              		.loc 1 437 5 is_stmt 0 view .LVU274
 911 0082 FFF7FEFF 		bl	memset
 912              	.LVL73:
 440:Src/YAB_fat32.c **** }
 913              		.loc 1 440 10 view .LVU275
 914 0086 0120     		movs	r0, #1
 915 0088 E4E7     		b	.L48
 916              	.LVL74:
 917              	.L61:
ARM GAS  /tmp/ccgfkiBj.s 			page 27


 429:Src/YAB_fat32.c ****   }
 918              		.loc 1 429 5 is_stmt 1 view .LVU276
 919 008a FFF7FEFF 		bl	_fat32_read_dir_entry
 920              	.LVL75:
 440:Src/YAB_fat32.c **** }
 921              		.loc 1 440 10 is_stmt 0 view .LVU277
 922 008e 0120     		movs	r0, #1
 923 0090 E0E7     		b	.L48
 924              	.LVL76:
 925              	.L62:
 433:Src/YAB_fat32.c ****   }
 926              		.loc 1 433 5 is_stmt 1 view .LVU278
 927 0092 FFF7FEFF 		bl	_fat32_read_firmware
 928              	.LVL77:
 440:Src/YAB_fat32.c **** }
 929              		.loc 1 440 10 is_stmt 0 view .LVU279
 930 0096 0120     		movs	r0, #1
 433:Src/YAB_fat32.c ****   }
 931              		.loc 1 433 5 view .LVU280
 932 0098 DCE7     		b	.L48
 933              	.LVL78:
 934              	.L59:
 408:Src/YAB_fat32.c ****   }
 935              		.loc 1 408 12 view .LVU281
 936 009a 0020     		movs	r0, #0
 937              	.LVL79:
 408:Src/YAB_fat32.c ****   }
 938              		.loc 1 408 12 view .LVU282
 939 009c DAE7     		b	.L48
 940              	.L64:
 941 009e 00BF     		.align	2
 942              	.L63:
 943 00a0 00000000 		.word	.LANCHOR1
 944              		.cfi_endproc
 945              	.LFE72:
 947              		.section	.rodata.fat32_write.str1.4,"aMS",%progbits,1
 948              		.align	2
 949              	.LC3:
 950 0000 42494E00 		.ascii	"BIN\000"
 951              		.section	.text.fat32_write,"ax",%progbits
 952              		.align	1
 953              		.global	fat32_write
 954              		.syntax unified
 955              		.thumb
 956              		.thumb_func
 957              		.fpu softvfp
 959              	fat32_write:
 960              	.LVL80:
 961              	.LFB73:
 442:Src/YAB_fat32.c **** 
 443:Src/YAB_fat32.c **** bool fat32_write(const uint8_t *b, uint32_t addr)
 444:Src/YAB_fat32.c **** {
 962              		.loc 1 444 1 is_stmt 1 view -0
 963              		.cfi_startproc
 964              		@ args = 0, pretend = 0, frame = 8
 965              		@ frame_needed = 0, uses_anonymous_args = 0
 966              		.loc 1 444 1 is_stmt 0 view .LVU284
ARM GAS  /tmp/ccgfkiBj.s 			page 28


 967 0000 70B5     		push	{r4, r5, r6, lr}
 968              	.LCFI12:
 969              		.cfi_def_cfa_offset 16
 970              		.cfi_offset 4, -16
 971              		.cfi_offset 5, -12
 972              		.cfi_offset 6, -8
 973              		.cfi_offset 14, -4
 974 0002 82B0     		sub	sp, sp, #8
 975              	.LCFI13:
 976              		.cfi_def_cfa_offset 24
 445:Src/YAB_fat32.c ****   if(addr & (FAT32_SECTOR_SIZE - 1))      // if not align ?
 977              		.loc 1 445 3 is_stmt 1 view .LVU285
 978              		.loc 1 445 11 is_stmt 0 view .LVU286
 979 0004 C1F30804 		ubfx	r4, r1, #0, #9
 980              		.loc 1 445 5 view .LVU287
 981 0008 002C     		cmp	r4, #0
 982 000a 40D1     		bne	.L73
 983 000c 0646     		mov	r6, r0
 446:Src/YAB_fat32.c ****   {
 447:Src/YAB_fat32.c ****     return false;
 448:Src/YAB_fat32.c ****   }
 449:Src/YAB_fat32.c ****   
 450:Src/YAB_fat32.c ****   uint32_t align_addr_end = (fw_addr_range.end & ~(FAT32_SECTOR_SIZE-1)) + ((fw_addr_range.end & (F
 984              		.loc 1 450 3 is_stmt 1 view .LVU288
 985              		.loc 1 450 43 is_stmt 0 view .LVU289
 986 000e 224B     		ldr	r3, .L79
 987 0010 5B68     		ldr	r3, [r3, #4]
 988              		.loc 1 450 48 view .LVU290
 989 0012 23F4FF72 		bic	r2, r3, #510
 990 0016 22F00102 		bic	r2, r2, #1
 991              		.loc 1 450 96 view .LVU291
 992 001a C3F30803 		ubfx	r3, r3, #0, #9
 993              		.loc 1 450 141 view .LVU292
 994 001e 0BB1     		cbz	r3, .L67
 995 0020 4FF40073 		mov	r3, #512
 996              	.L67:
 997              		.loc 1 450 12 discriminator 4 view .LVU293
 998 0024 1344     		add	r3, r3, r2
 999              	.LVL81:
 451:Src/YAB_fat32.c ****   
 452:Src/YAB_fat32.c ****   if(addr < FAT32_DIR_ENTRY_ADDR)
 1000              		.loc 1 452 3 is_stmt 1 discriminator 4 view .LVU294
 1001              		.loc 1 452 5 is_stmt 0 discriminator 4 view .LVU295
 1002 0026 B1F5800F 		cmp	r1, #4194304
 1003 002a 33D3     		bcc	.L74
 453:Src/YAB_fat32.c ****   {
 454:Src/YAB_fat32.c ****     // No operation
 455:Src/YAB_fat32.c ****   }
 456:Src/YAB_fat32.c ****   else if(addr == FAT32_DIR_ENTRY_ADDR)
 1004              		.loc 1 456 8 is_stmt 1 view .LVU296
 1005              		.loc 1 456 10 is_stmt 0 view .LVU297
 1006 002c 0AD0     		beq	.L68
 457:Src/YAB_fat32.c ****   {
 458:Src/YAB_fat32.c ****     uint32_t i;
 459:Src/YAB_fat32.c ****     for(i=0; i<FAT32_SECTOR_SIZE; i+= sizeof(fat32_dir_entry_t))
 460:Src/YAB_fat32.c ****     {
 461:Src/YAB_fat32.c ****       const uint8_t *b_offset = (const uint8_t *)(b + i);
ARM GAS  /tmp/ccgfkiBj.s 			page 29


 462:Src/YAB_fat32.c ****       fat32_dir_entry_t *entry = (fat32_dir_entry_t*)b_offset;
 463:Src/YAB_fat32.c ****       
 464:Src/YAB_fat32.c ****       if(memcmp((void*) &entry->DIR_Name[8], "BIN", 3) == 0)
 465:Src/YAB_fat32.c ****       {
 466:Src/YAB_fat32.c ****         uint32_t clus = (((uint32_t)(entry->DIR_FstClusHI)) << 16) | entry->DIR_FstClusLO;
 467:Src/YAB_fat32.c ****         
 468:Src/YAB_fat32.c ****         fw_addr_range.begin = ((clus-2) + 0x2000 ) * FAT32_SECTOR_SIZE;
 469:Src/YAB_fat32.c ****         fw_addr_range.end = fw_addr_range.begin + MIN(entry->DIR_FileSize, APP_SIZE);
 470:Src/YAB_fat32.c ****       }
 471:Src/YAB_fat32.c ****     }
 472:Src/YAB_fat32.c ****   }
 473:Src/YAB_fat32.c ****   else if(addr >= fw_addr_range.begin && addr < align_addr_end)
 1007              		.loc 1 473 8 is_stmt 1 view .LVU298
 1008              		.loc 1 473 32 is_stmt 0 view .LVU299
 1009 002e 1A4A     		ldr	r2, .L79
 1010 0030 1268     		ldr	r2, [r2]
 1011              		.loc 1 473 10 view .LVU300
 1012 0032 8A42     		cmp	r2, r1
 1013 0034 01D8     		bhi	.L72
 1014              		.loc 1 473 39 discriminator 1 view .LVU301
 1015 0036 9942     		cmp	r1, r3
 1016 0038 25D3     		bcc	.L77
 1017              	.L72:
 1018              	.LBB7:
 474:Src/YAB_fat32.c ****   {
 475:Src/YAB_fat32.c ****     if(!_fat32_write_firmware(b, addr))
 476:Src/YAB_fat32.c ****     {
 477:Src/YAB_fat32.c ****       return false;
 478:Src/YAB_fat32.c ****     }
 479:Src/YAB_fat32.c ****   }
 480:Src/YAB_fat32.c ****   else
 481:Src/YAB_fat32.c ****   {
 482:Src/YAB_fat32.c ****     volatile uint8_t halt = 1;
 1019              		.loc 1 482 5 is_stmt 1 view .LVU302
 1020              		.loc 1 482 22 is_stmt 0 view .LVU303
 1021 003a 0120     		movs	r0, #1
 1022              	.LVL82:
 1023              		.loc 1 482 22 view .LVU304
 1024 003c 8DF80700 		strb	r0, [sp, #7]
 1025 0040 26E0     		b	.L66
 1026              	.LVL83:
 1027              	.L70:
 1028              		.loc 1 482 22 view .LVU305
 1029              	.LBE7:
 1030              	.LBB8:
 459:Src/YAB_fat32.c ****     {
 1031              		.loc 1 459 35 is_stmt 1 discriminator 2 view .LVU306
 459:Src/YAB_fat32.c ****     {
 1032              		.loc 1 459 36 is_stmt 0 discriminator 2 view .LVU307
 1033 0042 2034     		adds	r4, r4, #32
 1034              	.LVL84:
 1035              	.L68:
 459:Src/YAB_fat32.c ****     {
 1036              		.loc 1 459 14 is_stmt 1 discriminator 1 view .LVU308
 459:Src/YAB_fat32.c ****     {
 1037              		.loc 1 459 5 is_stmt 0 discriminator 1 view .LVU309
 1038 0044 B4F5007F 		cmp	r4, #512
ARM GAS  /tmp/ccgfkiBj.s 			page 30


 1039 0048 1BD2     		bcs	.L78
 1040              	.LBB9:
 461:Src/YAB_fat32.c ****       fat32_dir_entry_t *entry = (fat32_dir_entry_t*)b_offset;
 1041              		.loc 1 461 7 is_stmt 1 view .LVU310
 461:Src/YAB_fat32.c ****       fat32_dir_entry_t *entry = (fat32_dir_entry_t*)b_offset;
 1042              		.loc 1 461 22 is_stmt 0 view .LVU311
 1043 004a 3519     		adds	r5, r6, r4
 1044              	.LVL85:
 462:Src/YAB_fat32.c ****       
 1045              		.loc 1 462 7 is_stmt 1 view .LVU312
 464:Src/YAB_fat32.c ****       {
 1046              		.loc 1 464 7 view .LVU313
 464:Src/YAB_fat32.c ****       {
 1047              		.loc 1 464 10 is_stmt 0 view .LVU314
 1048 004c 0322     		movs	r2, #3
 1049 004e 1349     		ldr	r1, .L79+4
 1050 0050 05F10800 		add	r0, r5, #8
 1051 0054 FFF7FEFF 		bl	memcmp
 1052              	.LVL86:
 464:Src/YAB_fat32.c ****       {
 1053              		.loc 1 464 9 view .LVU315
 1054 0058 0028     		cmp	r0, #0
 1055 005a F2D1     		bne	.L70
 1056              	.LBB10:
 466:Src/YAB_fat32.c ****         
 1057              		.loc 1 466 9 is_stmt 1 view .LVU316
 466:Src/YAB_fat32.c ****         
 1058              		.loc 1 466 43 is_stmt 0 view .LVU317
 1059 005c AA8A     		ldrh	r2, [r5, #20]	@ unaligned
 466:Src/YAB_fat32.c ****         
 1060              		.loc 1 466 75 view .LVU318
 1061 005e 6B8B     		ldrh	r3, [r5, #26]	@ unaligned
 466:Src/YAB_fat32.c ****         
 1062              		.loc 1 466 18 view .LVU319
 1063 0060 43EA0243 		orr	r3, r3, r2, lsl #16
 1064              	.LVL87:
 468:Src/YAB_fat32.c ****         fw_addr_range.end = fw_addr_range.begin + MIN(entry->DIR_FileSize, APP_SIZE);
 1065              		.loc 1 468 9 is_stmt 1 view .LVU320
 468:Src/YAB_fat32.c ****         fw_addr_range.end = fw_addr_range.begin + MIN(entry->DIR_FileSize, APP_SIZE);
 1066              		.loc 1 468 41 is_stmt 0 view .LVU321
 1067 0064 03F5FF53 		add	r3, r3, #8160
 1068              	.LVL88:
 468:Src/YAB_fat32.c ****         fw_addr_range.end = fw_addr_range.begin + MIN(entry->DIR_FileSize, APP_SIZE);
 1069              		.loc 1 468 41 view .LVU322
 1070 0068 1E33     		adds	r3, r3, #30
 1071              	.LVL89:
 468:Src/YAB_fat32.c ****         fw_addr_range.end = fw_addr_range.begin + MIN(entry->DIR_FileSize, APP_SIZE);
 1072              		.loc 1 468 52 view .LVU323
 1073 006a 5B02     		lsls	r3, r3, #9
 1074              	.LVL90:
 468:Src/YAB_fat32.c ****         fw_addr_range.end = fw_addr_range.begin + MIN(entry->DIR_FileSize, APP_SIZE);
 1075              		.loc 1 468 29 view .LVU324
 1076 006c 0A4A     		ldr	r2, .L79
 1077              	.LVL91:
 468:Src/YAB_fat32.c ****         fw_addr_range.end = fw_addr_range.begin + MIN(entry->DIR_FileSize, APP_SIZE);
 1078              		.loc 1 468 29 view .LVU325
 1079 006e 1360     		str	r3, [r2]
ARM GAS  /tmp/ccgfkiBj.s 			page 31


 1080              	.LVL92:
 469:Src/YAB_fat32.c ****       }
 1081              		.loc 1 469 9 is_stmt 1 view .LVU326
 469:Src/YAB_fat32.c ****       }
 1082              		.loc 1 469 51 is_stmt 0 view .LVU327
 1083 0070 E969     		ldr	r1, [r5, #28]	@ unaligned
 469:Src/YAB_fat32.c ****       }
 1084              		.loc 1 469 49 view .LVU328
 1085 0072 B1F5703F 		cmp	r1, #245760
 1086 0076 94BF     		ite	ls
 1087 0078 5B18     		addls	r3, r3, r1
 1088 007a 03F57033 		addhi	r3, r3, #245760
 469:Src/YAB_fat32.c ****       }
 1089              		.loc 1 469 27 view .LVU329
 1090 007e 5360     		str	r3, [r2, #4]
 1091 0080 DFE7     		b	.L70
 1092              	.LVL93:
 1093              	.L78:
 469:Src/YAB_fat32.c ****       }
 1094              		.loc 1 469 27 view .LVU330
 1095              	.LBE10:
 1096              	.LBE9:
 1097              	.LBE8:
 483:Src/YAB_fat32.c ****   }
 484:Src/YAB_fat32.c ****   
 485:Src/YAB_fat32.c ****   return true;
 1098              		.loc 1 485 10 view .LVU331
 1099 0082 0120     		movs	r0, #1
 1100 0084 04E0     		b	.L66
 1101              	.LVL94:
 1102              	.L77:
 475:Src/YAB_fat32.c ****     {
 1103              		.loc 1 475 5 is_stmt 1 view .LVU332
 475:Src/YAB_fat32.c ****     {
 1104              		.loc 1 475 9 is_stmt 0 view .LVU333
 1105 0086 3046     		mov	r0, r6
 1106              	.LVL95:
 475:Src/YAB_fat32.c ****     {
 1107              		.loc 1 475 9 view .LVU334
 1108 0088 FFF7FEFF 		bl	_fat32_write_firmware
 1109              	.LVL96:
 475:Src/YAB_fat32.c ****     {
 1110              		.loc 1 475 9 view .LVU335
 1111 008c 00E0     		b	.L66
 1112              	.LVL97:
 1113              	.L73:
 447:Src/YAB_fat32.c ****   }
 1114              		.loc 1 447 12 view .LVU336
 1115 008e 0020     		movs	r0, #0
 1116              	.LVL98:
 1117              	.L66:
 486:Src/YAB_fat32.c **** }
 1118              		.loc 1 486 1 view .LVU337
 1119 0090 02B0     		add	sp, sp, #8
 1120              	.LCFI14:
 1121              		.cfi_remember_state
 1122              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccgfkiBj.s 			page 32


 1123              		@ sp needed
 1124 0092 70BD     		pop	{r4, r5, r6, pc}
 1125              	.LVL99:
 1126              	.L74:
 1127              	.LCFI15:
 1128              		.cfi_restore_state
 485:Src/YAB_fat32.c **** }
 1129              		.loc 1 485 10 view .LVU338
 1130 0094 0120     		movs	r0, #1
 1131              	.LVL100:
 485:Src/YAB_fat32.c **** }
 1132              		.loc 1 485 10 view .LVU339
 1133 0096 FBE7     		b	.L66
 1134              	.L80:
 1135              		.align	2
 1136              	.L79:
 1137 0098 00000000 		.word	.LANCHOR1
 1138 009c 00000000 		.word	.LC3
 1139              		.cfi_endproc
 1140              	.LFE73:
 1142              		.section	.rodata
 1143              		.align	2
 1144              		.set	.LANCHOR0,. + 0
 1145              	.LC0:
 1146 0000 EBFE904D 		.ascii	"\353\376\220MSDOS5.0\000\002\001|\021\002\000\000\000"
 1146      53444F53 
 1146      352E3000 
 1146      02017C11 
 1146      02000000 
 1147 0014 00F80000 		.ascii	"\000\370\000\000?\000\377\000?\000\000\000\301\300\003"
 1147      3F00FF00 
 1147      3F000000 
 1147      C1C003
 1148 0023 00420700 		.ascii	"\000B\007\000\000\000\000\000\000\002\000\000\000\001"
 1148      00000000 
 1148      00020000 
 1148      0001
 1149 0031 00060000 		.ascii	"\000\006\000\000\000\000\000\000\000\000\000\000\000"
 1149      00000000 
 1149      00000000 
 1149      00
 1150 003e 00008000 		.ascii	"\000\000\200\000)\260I\220\002NO NAME    FAT32   "
 1150      29B04990 
 1150      024E4F20 
 1150      4E414D45 
 1150      20202020 
 1151              		.section	.data.fw_addr_range,"aw"
 1152              		.align	2
 1153              		.set	.LANCHOR1,. + 0
 1156              	fw_addr_range:
 1157 0000 00064000 		.word	4195840
 1158 0004 00C64300 		.word	4441600
 1159              		.text
 1160              	.Letext0:
 1161              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 1162              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 1163              		.file 4 "/usr/include/newlib/sys/_types.h"
ARM GAS  /tmp/ccgfkiBj.s 			page 33


 1164              		.file 5 "/usr/include/newlib/sys/reent.h"
 1165              		.file 6 "/usr/include/newlib/sys/lock.h"
 1166              		.file 7 "Drivers/CMSIS/Include/core_cm3.h"
 1167              		.file 8 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1168              		.file 9 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1169              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1170              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1171              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_flash_ex.h"
 1172              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1173              		.file 14 "Inc/YAB_F103_config.h"
 1174              		.file 15 "/usr/include/newlib/string.h"
 1175              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_flash.h"
 1176              		.file 17 "<built-in>"
ARM GAS  /tmp/ccgfkiBj.s 			page 34


DEFINED SYMBOLS
                            *ABS*:0000000000000000 YAB_fat32.c
     /tmp/ccgfkiBj.s:16     .text._fat32_read_fat_table:0000000000000000 $t
     /tmp/ccgfkiBj.s:23     .text._fat32_read_fat_table:0000000000000000 _fat32_read_fat_table
     /tmp/ccgfkiBj.s:181    .text._fat32_read_fat_table:000000000000007c $d
     /tmp/ccgfkiBj.s:188    .text._fat32_read_bpb:0000000000000000 $t
     /tmp/ccgfkiBj.s:194    .text._fat32_read_bpb:0000000000000000 _fat32_read_bpb
     /tmp/ccgfkiBj.s:234    .text._fat32_read_bpb:0000000000000028 $d
     /tmp/ccgfkiBj.s:239    .text._fat32_read_fsinfo:0000000000000000 $t
     /tmp/ccgfkiBj.s:245    .text._fat32_read_fsinfo:0000000000000000 _fat32_read_fsinfo
     /tmp/ccgfkiBj.s:315    .text._fat32_read_fsinfo2:0000000000000000 $t
     /tmp/ccgfkiBj.s:321    .text._fat32_read_fsinfo2:0000000000000000 _fat32_read_fsinfo2
     /tmp/ccgfkiBj.s:355    .rodata._fat32_read_dir_entry.str1.4:0000000000000000 $d
     /tmp/ccgfkiBj.s:362    .text._fat32_read_dir_entry:0000000000000000 $t
     /tmp/ccgfkiBj.s:368    .text._fat32_read_dir_entry:0000000000000000 _fat32_read_dir_entry
     /tmp/ccgfkiBj.s:513    .text._fat32_read_dir_entry:00000000000000c8 $d
     /tmp/ccgfkiBj.s:519    .text._fat32_read_firmware:0000000000000000 $t
     /tmp/ccgfkiBj.s:525    .text._fat32_read_firmware:0000000000000000 _fat32_read_firmware
     /tmp/ccgfkiBj.s:573    .text._fat32_read_firmware:0000000000000028 $d
     /tmp/ccgfkiBj.s:578    .text._fat32_write_firmware:0000000000000000 $t
     /tmp/ccgfkiBj.s:584    .text._fat32_write_firmware:0000000000000000 _fat32_write_firmware
     /tmp/ccgfkiBj.s:781    .text._fat32_write_firmware:00000000000000a0 $d
     /tmp/ccgfkiBj.s:791    .text.fat32_read:0000000000000000 $t
     /tmp/ccgfkiBj.s:798    .text.fat32_read:0000000000000000 fat32_read
     /tmp/ccgfkiBj.s:943    .text.fat32_read:00000000000000a0 $d
     /tmp/ccgfkiBj.s:948    .rodata.fat32_write.str1.4:0000000000000000 $d
     /tmp/ccgfkiBj.s:952    .text.fat32_write:0000000000000000 $t
     /tmp/ccgfkiBj.s:959    .text.fat32_write:0000000000000000 fat32_write
     /tmp/ccgfkiBj.s:1137   .text.fat32_write:0000000000000098 $d
     /tmp/ccgfkiBj.s:1143   .rodata:0000000000000000 $d
     /tmp/ccgfkiBj.s:1152   .data.fw_addr_range:0000000000000000 $d
     /tmp/ccgfkiBj.s:1156   .data.fw_addr_range:0000000000000000 fw_addr_range

UNDEFINED SYMBOLS
memcpy
memset
HAL_GPIO_WritePin
HAL_FLASH_Unlock
HAL_FLASH_Lock
HAL_FLASHEx_Erase
HAL_FLASH_Program
LED_On_Time
memcmp
