From e5dbdd0ea2d5ebdb64d2be898cad9b832440f6e6 Mon Sep 17 00:00:00 2001
From: "Satoshi N. M" <snmatsutake@yahoo.co.jp>
Date: Sat, 23 Dec 2017 17:24:28 -0800
Subject: [PATCH] Remove platforms/native

---
 src/platforms/native/Makefile.inc |  34 ----
 src/platforms/native/platform.c   | 306 ------------------------------
 src/platforms/native/platform.h   | 180 ------------------
 3 files changed, 520 deletions(-)
 delete mode 100644 src/platforms/native/Makefile.inc
 delete mode 100644 src/platforms/native/platform.c
 delete mode 100644 src/platforms/native/platform.h

diff --git a/src/platforms/native/Makefile.inc b/src/platforms/native/Makefile.inc
deleted file mode 100644
index 3cbc74d..0000000
--- a/src/platforms/native/Makefile.inc
+++ /dev/null
@@ -1,34 +0,0 @@
-CROSS_COMPILE ?= arm-none-eabi-
-CC = $(CROSS_COMPILE)gcc
-OBJCOPY = $(CROSS_COMPILE)objcopy
-
-CFLAGS += -Istm32/include -mcpu=cortex-m3 -mthumb \
-	-DSTM32F1 -DBLACKMAGIC -I../libopencm3/include \
-	-Iplatforms/stm32
-
-LDFLAGS_BOOT := $(LDFLAGS) -lopencm3_stm32f1 -Wl,--defsym,_stack=0x20005000 \
-	-Wl,-T,platforms/stm32/blackmagic.ld -nostartfiles -lc \
-	-Wl,-Map=mapfile -mthumb -mcpu=cortex-m3 -Wl,-gc-sections \
-	-L../libopencm3/lib
-LDFLAGS = $(LDFLAGS_BOOT) -Wl,-Ttext=0x8002000
-
-ifeq ($(ENABLE_DEBUG), 1)
-LDFLAGS += --specs=rdimon.specs
-else
-LDFLAGS += --specs=nosys.specs
-endif
-
-VPATH += platforms/stm32
-
-SRC += 	cdcacm.c	\
-	traceswo.c	\
-	usbuart.c	\
-	serialno.c	\
-	timing.c	\
-	timing_stm32.c	\
-
-all:	blackmagic.bin
-
-host_clean:
-	-$(Q)$(RM) -f blackmagic.bin
-
diff --git a/src/platforms/native/platform.c b/src/platforms/native/platform.c
deleted file mode 100644
index c69eea3..0000000
--- a/src/platforms/native/platform.c
+++ /dev/null
@@ -1,306 +0,0 @@
-/*
- * This file is part of the Black Magic Debug project.
- *
- * Copyright (C) 2011  Black Sphere Technologies Ltd.
- * Written by Gareth McMullin <gareth@blacksphere.co.nz>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-/* This file implements the platform specific functions for the STM32
- * implementation.
- */
-
-#include "general.h"
-#include "cdcacm.h"
-#include "usbuart.h"
-#include "morse.h"
-
-#include <libopencm3/stm32/f1/rcc.h>
-#include <libopencm3/cm3/scb.h>
-#include <libopencm3/cm3/scs.h>
-#include <libopencm3/cm3/nvic.h>
-#include <libopencm3/stm32/exti.h>
-#include <libopencm3/stm32/usart.h>
-#include <libopencm3/usb/usbd.h>
-#include <libopencm3/stm32/f1/adc.h>
-
-static void adc_init(void);
-static void setup_vbus_irq(void);
-
-/* Pins PB[7:5] are used to detect hardware revision.
- * 000 - Original production build.
- * 001 - Mini production build.
- * 010 - Mini V2.0e and later.
- */
-int platform_hwversion(void)
-{
-	static int hwversion = -1;
-	uint16_t hwversion_pins = GPIO7 | GPIO6 | GPIO5;
-	uint16_t unused_pins = hwversion_pins ^ 0xFFFF;
-
-	/* Only check for version if this is the first time. */
-	if (hwversion == -1) {
-		/* Configure the hardware version pins as input pull-up/down */
-		gpio_set_mode(GPIOB, GPIO_MODE_INPUT,
-				GPIO_CNF_INPUT_PULL_UPDOWN,
-				hwversion_pins);
-
-		/* Enable the weak pull up. */
-		gpio_set(GPIOB, hwversion_pins);
-
-		/* Wait a little to make sure the pull up is in effect... */
-		for(int i = 0; i < 100; i++) asm("nop");
-
-		/* Get all pins that are pulled low in hardware.
-		 * This also sets all the "unused" pins to 1.
-		 */
-		uint16_t pins_negative = gpio_get(GPIOB, hwversion_pins) | unused_pins;
-
-		/* Enable the weak pull down. */
-		gpio_clear(GPIOB, hwversion_pins);
-
-		/* Wait a little to make sure the pull down is in effect... */
-		for(int i = 0; i < 100; i++) asm("nop");
-
-		/* Get all the pins that are pulled high in hardware. */
-		uint16_t pins_positive = gpio_get(GPIOB, hwversion_pins);
-
-		/* Hardware version is the id defined by the pins that are
-		 * asserted low or high by the hardware. This means that pins
-		 * that are left floating are 0 and those that are either
-		 * pulled high or low are 1.
-		 */
-		hwversion = (((pins_positive ^ pins_negative) ^ 0xFFFF) & hwversion_pins) >> 5;
-	}
-
-	return hwversion;
-}
-
-void platform_init(void)
-{
-	SCS_DEMCR |= SCS_DEMCR_VC_MON_EN;
-#ifdef ENABLE_DEBUG
-	void initialise_monitor_handles(void);
-	initialise_monitor_handles();
-#endif
-
-	rcc_clock_setup_in_hse_8mhz_out_72mhz();
-
-	/* Enable peripherals */
-	rcc_periph_clock_enable(RCC_USB);
-	rcc_periph_clock_enable(RCC_GPIOA);
-	rcc_periph_clock_enable(RCC_GPIOB);
-	rcc_periph_clock_enable(RCC_AFIO);
-	rcc_periph_clock_enable(RCC_CRC);
-
-	/* Setup GPIO ports */
-	gpio_clear(USB_PU_PORT, USB_PU_PIN);
-	gpio_set_mode(USB_PU_PORT, GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT,
-			USB_PU_PIN);
-
-	gpio_set_mode(JTAG_PORT, GPIO_MODE_OUTPUT_50_MHZ,
-			GPIO_CNF_OUTPUT_PUSHPULL,
-			TMS_DIR_PIN | TMS_PIN | TCK_PIN | TDI_PIN);
-	/* This needs some fixing... */
-	/* Toggle required to sort out line drivers... */
-	gpio_port_write(GPIOA, 0x8102);
-	gpio_port_write(GPIOB, 0x2000);
-
-	gpio_port_write(GPIOA, 0x8182);
-	gpio_port_write(GPIOB, 0x2002);
-
-	gpio_set_mode(LED_PORT, GPIO_MODE_OUTPUT_2_MHZ,
-			GPIO_CNF_OUTPUT_PUSHPULL,
-			LED_UART | LED_IDLE_RUN | LED_ERROR);
-
-	/* FIXME: This pin in intended to be input, but the TXS0108 fails
-	 * to release the device from reset if this floats. */
-	gpio_set_mode(GPIOA, GPIO_MODE_OUTPUT_2_MHZ,
-			GPIO_CNF_OUTPUT_PUSHPULL, GPIO7);
-	/* Enable SRST output. Original uses a NPN to pull down, so setting the
-	 * output HIGH asserts. Mini is directly connected so use open drain output
-	 * and set LOW to assert.
-	 */
-	platform_srst_set_val(false);
-	gpio_set_mode(SRST_PORT, GPIO_MODE_OUTPUT_50_MHZ,
-			(((platform_hwversion() == 0) ||
-			  (platform_hwversion() >= 3))
-			 ? GPIO_CNF_OUTPUT_PUSHPULL
-			 : GPIO_CNF_OUTPUT_OPENDRAIN),
-			SRST_PIN);
-
-	/* Enable internal pull-up on PWR_BR so that we don't drive
-	   TPWR locally or inadvertently supply power to the target. */
-	if (platform_hwversion () == 1) {
-		gpio_set(PWR_BR_PORT, PWR_BR_PIN);
-		gpio_set_mode(PWR_BR_PORT, GPIO_MODE_INPUT,
-		              GPIO_CNF_INPUT_PULL_UPDOWN, PWR_BR_PIN);
-	} else if (platform_hwversion() > 1) {
-		gpio_set(PWR_BR_PORT, PWR_BR_PIN);
-		gpio_set_mode(PWR_BR_PORT, GPIO_MODE_OUTPUT_50_MHZ,
-		              GPIO_CNF_OUTPUT_OPENDRAIN, PWR_BR_PIN);
-	}
-
-	if (platform_hwversion() > 0) {
-		adc_init();
-	} else {
-		gpio_clear(GPIOB, GPIO0);
-		gpio_set_mode(GPIOB, GPIO_MODE_INPUT,
-				GPIO_CNF_INPUT_PULL_UPDOWN, GPIO0);
-	}
-	/* Relocate interrupt vector table here */
-	extern int vector_table;
-	SCB_VTOR = (uint32_t)&vector_table;
-
-	platform_timing_init();
-	cdcacm_init();
-
-	/* On mini hardware, UART and SWD share connector pins.
-	 * Don't enable UART if we're being debugged. */
-	if ((platform_hwversion() == 0) || !(SCS_DEMCR & SCS_DEMCR_TRCENA))
-		usbuart_init();
-
-	setup_vbus_irq();
-}
-
-void platform_srst_set_val(bool assert)
-{
-	gpio_set_val(TMS_PORT, TMS_PIN, 1);
-	if ((platform_hwversion() == 0) ||
-	    (platform_hwversion() >= 3)) {
-		gpio_set_val(SRST_PORT, SRST_PIN, assert);
-	} else {
-		gpio_set_val(SRST_PORT, SRST_PIN, !assert);
-	}
-	if (assert) {
-		for(int i = 0; i < 10000; i++) asm("nop");
-	}
-}
-
-bool platform_srst_get_val(void)
-{
-	if (platform_hwversion() == 0) {
-		return gpio_get(SRST_SENSE_PORT, SRST_SENSE_PIN) == 0;
-	} else if (platform_hwversion() >= 3) {
-		return gpio_get(SRST_SENSE_PORT, SRST_SENSE_PIN) != 0;
-	} else {
-		return gpio_get(SRST_PORT, SRST_PIN) == 0;
-	}
-}
-
-bool platform_target_get_power(void)
-{
-	if (platform_hwversion() > 0) {
-		return !gpio_get(PWR_BR_PORT, PWR_BR_PIN);
-  	}
-	return 0;
-}
-
-void platform_target_set_power(bool power)
-{
-	if (platform_hwversion() > 0) {
-		gpio_set_val(PWR_BR_PORT, PWR_BR_PIN, !power);
-	}
-}
-
-static void adc_init(void)
-{
-	rcc_periph_clock_enable(RCC_ADC1);
-
-	gpio_set_mode(GPIOB, GPIO_MODE_INPUT,
-			GPIO_CNF_INPUT_ANALOG, GPIO0);
-
-	adc_power_off(ADC1);
-	adc_disable_scan_mode(ADC1);
-	adc_set_single_conversion_mode(ADC1);
-	adc_disable_external_trigger_regular(ADC1);
-	adc_set_right_aligned(ADC1);
-	adc_set_sample_time_on_all_channels(ADC1, ADC_SMPR_SMP_28DOT5CYC);
-
-	adc_power_on(ADC1);
-
-	/* Wait for ADC starting up. */
-	for (int i = 0; i < 800000; i++)    /* Wait a bit. */
-		__asm__("nop");
-
-	adc_reset_calibration(ADC1);
-	adc_calibrate(ADC1);
-}
-
-const char *platform_target_voltage(void)
-{
-	if (platform_hwversion() == 0)
-		return gpio_get(GPIOB, GPIO0) ? "OK" : "ABSENT!";
-
-	static char ret[] = "0.0V";
-	const uint8_t channel = 8;
-	adc_set_regular_sequence(ADC1, 1, (uint8_t*)&channel);
-
-	adc_start_conversion_direct(ADC1);
-
-	/* Wait for end of conversion. */
-	while (!adc_eoc(ADC1));
-
-	uint32_t val = adc_read_regular(ADC1) * 99; /* 0-4095 */
-	ret[0] = '0' + val / 81910;
-	ret[2] = '0' + (val / 8191) % 10;
-
-	return ret;
-}
-
-void platform_request_boot(void)
-{
-	/* Disconnect USB cable */
-	gpio_set_mode(USB_PU_PORT, GPIO_MODE_INPUT, 0, USB_PU_PIN);
-
-	/* Drive boot request pin */
-	gpio_set_mode(GPIOB, GPIO_MODE_OUTPUT_2_MHZ,
-			GPIO_CNF_OUTPUT_PUSHPULL, GPIO12);
-	gpio_clear(GPIOB, GPIO12);
-}
-
-void exti15_10_isr(void)
-{
-	if (gpio_get(USB_VBUS_PORT, USB_VBUS_PIN)) {
-		/* Drive pull-up high if VBUS connected */
-		gpio_set_mode(USB_PU_PORT, GPIO_MODE_OUTPUT_10_MHZ,
-				GPIO_CNF_OUTPUT_PUSHPULL, USB_PU_PIN);
-	} else {
-		/* Allow pull-up to float if VBUS disconnected */
-		gpio_set_mode(USB_PU_PORT, GPIO_MODE_INPUT,
-				GPIO_CNF_INPUT_FLOAT, USB_PU_PIN);
-	}
-
-	exti_reset_request(USB_VBUS_PIN);
-}
-
-static void setup_vbus_irq(void)
-{
-	nvic_set_priority(USB_VBUS_IRQ, IRQ_PRI_USB_VBUS);
-	nvic_enable_irq(USB_VBUS_IRQ);
-
-	gpio_set(USB_VBUS_PORT, USB_VBUS_PIN);
-	gpio_set(USB_PU_PORT, USB_PU_PIN);
-
-	gpio_set_mode(USB_VBUS_PORT, GPIO_MODE_INPUT,
-			GPIO_CNF_INPUT_PULL_UPDOWN, USB_VBUS_PIN);
-
-	/* Configure EXTI for USB VBUS monitor */
-	exti_select_source(USB_VBUS_PIN, USB_VBUS_PORT);
-	exti_set_trigger(USB_VBUS_PIN, EXTI_TRIGGER_BOTH);
-	exti_enable_request(USB_VBUS_PIN);
-
-	exti15_10_isr();
-}
diff --git a/src/platforms/native/platform.h b/src/platforms/native/platform.h
deleted file mode 100644
index a261cbc..0000000
--- a/src/platforms/native/platform.h
+++ /dev/null
@@ -1,180 +0,0 @@
-/*
- * This file is part of the Black Magic Debug project.
- *
- * Copyright (C) 2011  Black Sphere Technologies Ltd.
- * Written by Gareth McMullin <gareth@blacksphere.co.nz>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-/* This file implements the platform specific functions for the STM32
- * implementation.
- */
-#ifndef __PLATFORM_H
-#define __PLATFORM_H
-
-#include "gpio.h"
-#include "timing.h"
-#include "timing_stm32.h"
-
-#define PLATFORM_HAS_TRACESWO
-#define PLATFORM_HAS_POWER_SWITCH
-#ifdef ENABLE_DEBUG
-#define PLATFORM_HAS_DEBUG
-#define USBUART_DEBUG
-#endif
-#define BOARD_IDENT             "Black Magic Probe"
-#define BOARD_IDENT_DFU	        "Black Magic Probe (Upgrade)"
-#define BOARD_IDENT_UPD	        "Black Magic Probe (DFU Upgrade)"
-#define DFU_IDENT               "Black Magic Firmware Upgrade"
-#define UPD_IFACE_STRING        "@Internal Flash   /0x08000000/8*001Kg"
-
-/* Important pin mappings for STM32 implementation:
- *
- * LED0 = 	PB2	(Yellow LED : Running)
- * LED1 = 	PB10	(Yellow LED : Idle)
- * LED2 = 	PB11	(Red LED    : Error)
- *
- * TPWR = 	RB0 (input) -- analogue on mini design ADC1, ch8
- * nTRST = 	PB1 (output) [blackmagic]
- * PWR_BR = 	PB1 (output) [blackmagic_mini] -- supply power to the target, active low
- * TMS_DIR =    PA1 (output) [blackmagic_mini v2.1] -- choose direction of the TCK pin, input low, output high
- * SRST_OUT = 	PA2 (output)
- * TDI = 	PA3 (output)
- * TMS = 	PA4 (input/output for SWDIO)
- * TCK = 	PA5 (output SWCLK)
- * TDO = 	PA6 (input)
- * nSRST = 	PA7 (input)
- *
- * USB cable pull-up: PA8
- * USB VBUS detect:  PB13 -- New on mini design.
- *                           Enable pull up for compatibility.
- * Force DFU mode button: PB12
- */
-
-/* Hardware definitions... */
-#define JTAG_PORT 	GPIOA
-#define TDI_PORT	JTAG_PORT
-#define TMS_DIR_PORT	JTAG_PORT
-#define TMS_PORT	JTAG_PORT
-#define TCK_PORT	JTAG_PORT
-#define TDO_PORT	JTAG_PORT
-#define TDI_PIN		GPIO3
-#define TMS_DIR_PIN	GPIO1
-#define TMS_PIN		GPIO4
-#define TCK_PIN		GPIO5
-#define TDO_PIN		GPIO6
-
-#define SWDIO_DIR_PORT	JTAG_PORT
-#define SWDIO_PORT 	JTAG_PORT
-#define SWCLK_PORT 	JTAG_PORT
-#define SWDIO_DIR_PIN	TMS_DIR_PIN
-#define SWDIO_PIN	TMS_PIN
-#define SWCLK_PIN	TCK_PIN
-
-#define TRST_PORT	GPIOB
-#define TRST_PIN	GPIO1
-#define PWR_BR_PORT	GPIOB
-#define PWR_BR_PIN	GPIO1
-#define SRST_PORT	GPIOA
-#define SRST_PIN	GPIO2
-#define SRST_SENSE_PORT	GPIOA
-#define SRST_SENSE_PIN	GPIO7
-
-#define USB_PU_PORT	GPIOA
-#define USB_PU_PIN	GPIO8
-
-#define USB_VBUS_PORT	GPIOB
-#define USB_VBUS_PIN	GPIO13
-#define USB_VBUS_IRQ	NVIC_EXTI15_10_IRQ
-
-#define LED_PORT	GPIOB
-#define LED_PORT_UART	GPIOB
-#define LED_0		GPIO2
-#define LED_1		GPIO10
-#define LED_2		GPIO11
-#define LED_UART	LED_0
-#define LED_IDLE_RUN	LED_1
-#define LED_ERROR	LED_2
-
-#define TMS_SET_MODE() do { \
-	gpio_set(TMS_DIR_PORT, TMS_DIR_PIN); \
-	gpio_set_mode(TMS_PORT, GPIO_MODE_OUTPUT_50_MHZ, \
-	              GPIO_CNF_OUTPUT_PUSHPULL, TMS_PIN); \
-} while(0)
-#define SWDIO_MODE_FLOAT() do { \
-	gpio_set_mode(SWDIO_PORT, GPIO_MODE_INPUT, \
-	              GPIO_CNF_INPUT_FLOAT, SWDIO_PIN); \
-	gpio_clear(SWDIO_DIR_PORT, SWDIO_DIR_PIN); \
-} while(0)
-#define SWDIO_MODE_DRIVE() do { \
-	gpio_set(SWDIO_DIR_PORT, SWDIO_DIR_PIN); \
-	gpio_set_mode(SWDIO_PORT, GPIO_MODE_OUTPUT_50_MHZ, \
-	              GPIO_CNF_OUTPUT_PUSHPULL, SWDIO_PIN); \
-} while(0)
-#define UART_PIN_SETUP() do { \
-	gpio_set_mode(USBUSART_PORT, GPIO_MODE_OUTPUT_2_MHZ, \
-	              GPIO_CNF_OUTPUT_ALTFN_PUSHPULL, USBUSART_TX_PIN); \
-} while(0)
-
-#define USB_DRIVER st_usbfs_v1_usb_driver
-#define USB_IRQ    NVIC_USB_LP_CAN_RX0_IRQ
-#define USB_ISR    usb_lp_can_rx0_isr
-/* Interrupt priorities.  Low numbers are high priority.
- * For now USART1 preempts USB which may spin while buffer is drained.
- * TIM3 is used for traceswo capture and must be highest priority.
- */
-#define IRQ_PRI_USB             (2 << 4)
-#define IRQ_PRI_USBUSART        (1 << 4)
-#define IRQ_PRI_USBUSART_TIM    (3 << 4)
-#define IRQ_PRI_USB_VBUS        (14 << 4)
-#define IRQ_PRI_TRACE           (0 << 4)
-
-#define USBUSART USART1
-#define USBUSART_CR1 USART1_CR1
-#define USBUSART_IRQ NVIC_USART1_IRQ
-#define USBUSART_CLK RCC_USART1
-#define USBUSART_PORT GPIOA
-#define USBUSART_TX_PIN GPIO9
-#define USBUSART_ISR usart1_isr
-#define USBUSART_TIM TIM4
-#define USBUSART_TIM_CLK_EN() rcc_periph_clock_enable(RCC_TIM4)
-#define USBUSART_TIM_IRQ NVIC_TIM4_IRQ
-#define USBUSART_TIM_ISR tim4_isr
-
-#define TRACE_TIM TIM3
-#define TRACE_TIM_CLK_EN() rcc_periph_clock_enable(RCC_TIM3)
-#define TRACE_IRQ   NVIC_TIM3_IRQ
-#define TRACE_ISR   tim3_isr
-
-#ifdef ENABLE_DEBUG
-extern bool debug_bmp;
-int usbuart_debug_write(const char *buf, size_t len);
-
-#define DEBUG printf
-#else
-#define DEBUG(...)
-#endif
-
-#define SET_RUN_STATE(state)	{running_status = (state);}
-#define SET_IDLE_STATE(state)	{gpio_set_val(LED_PORT, LED_IDLE_RUN, state);}
-#define SET_ERROR_STATE(state)	{gpio_set_val(LED_PORT, LED_ERROR, state);}
-
-/* Use newlib provided integer only stdio functions */
-#define sscanf siscanf
-#define sprintf siprintf
-#define snprintf sniprintf
-#define vasprintf vasiprintf
-
-#endif
